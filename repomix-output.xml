This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  ISSUE_TEMPLATE/
    bug_report.md
    feature_request.md
  dependabot.yml
core/
  src/
    main/
      java/
        dev/
          objz/
            commandbridge/
              core/
                json/
                  MessageBuilder.java
                  MessageParser.java
                utils/
                  ConfigManager.java
                  ScriptManager.java
                  StringParser.java
                  TLSUtils.java
                  VersionChecker.java
                websocket/
                  WebSocketClient.java
                  WebSocketServer.java
                Logger.java
  build.gradle.kts
gradle/
  wrapper/
    gradle-wrapper.properties
paper/
  src/
    main/
      java/
        dev/
          objz/
            commandbridge/
              paper/
                command/
                  CommandExecutor.java
                  CommandForwarder.java
                  CommandRegistrar.java
                core/
                  Runtime.java
                  Startup.java
                utils/
                  CommandUtils.java
                  Encoder.java
                  GeneralUtils.java
                  SchedulerAdapter.java
                  ScriptUtils.java
                websocket/
                  Client.java
                  Ping.java
                Main.java
      resources/
        bukkit-config.yml
        bukkit-example.yml
        paper-plugin.yml
        plugin.yml
  build.gradle.kts
velocity/
  src/
    main/
      java/
        dev/
          objz/
            commandbridge/
              velocity/
                command/
                  CommandDispatcher.java
                  CommandForwarder.java
                  CommandRegistrar.java
                core/
                  Runtime.java
                  Startup.java
                helper/
                  command/
                    DumpCommand.java
                    ListCommand.java
                    ReloadCommand.java
                    StartCommand.java
                    StopCommand.java
                    VersionCommand.java
                  FailureChecker.java
                  HelpCommand.java
                  InternalRegistrar.java
                  StatusManager.java
                util/
                  Encoder.java
                  GeneralUtils.java
                  ProxyUtils.java
                  ScriptUtils.java
                websocket/
                  HttpServer.java
                  Server.java
                Main.java
      resources/
        velocity-config.yml
        velocity-example.yml
  build.gradle.kts
.gitignore
build.gradle.kts
CHANGELOG.md
gradlew
gradlew.bat
LICENSE
README.md
server.sh
settings.gradle.kts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="gradle/wrapper/gradle-wrapper.properties">
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.10-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/utils/Encoder.java">
package dev.objz.commandbridge.paper.utils;

import com.github.luben.zstd.Zstd;
import dev.objz.commandbridge.core.utils.ScriptManager.Command;
import dev.objz.commandbridge.core.utils.ScriptManager.ScriptConfig;
import dev.objz.commandbridge.paper.Main;
import dev.objz.commandbridge.paper.Main.ServerInfo;

import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class Encoder {
    private final Map<String, ScriptConfig> scripts = new LinkedHashMap<>();

    public void addScriptConfig(ScriptConfig config) {
        if (config == null || config.getName() == null) {
            throw new IllegalArgumentException("ScriptConfig or name cannot be null");
        }
        scripts.put(config.getName(), config);
    }

    public String encode() {
        StringBuilder sb = new StringBuilder();
        ServerInfo serverInfo = Main.detectServer();
        if (serverInfo == null) {
            throw new IllegalStateException("Server information could not be detected");
        }


        //header
        sb.append(serverInfo.name()).append("/").append(System.getProperty("java.version")).append("/").append(serverInfo.version());

        for (ScriptConfig script : scripts.values()) {
            sb.append("@");

            //name
            sb.append(encodeField(script.getName())).append(",");

            //aliases
            sb.append(encodeList(script.getAliases())).append(",");

            //script flags: bit2=enabled, bit1=ignorePerm, bit0=hideWarn
            int scriptFlags =
                  (script.isEnabled()                    ? 1 << 2 : 0)
                | (script.shouldIgnorePermissionCheck()? 1 << 1 : 0)
                | (script.shouldHidePermissionWarning()? 1 << 0 : 0);
            sb.append(Integer.toString(scriptFlags, 36));

            //commands
            for (Command cmd : script.getCommands()) {
                sb.append(";");
                //command 
                sb.append(encodeField(cmd.getCommand())).append(",");
                //delay
                sb.append(cmd.getDelay()).append(",");
                //executor: 'p' or 'c'
                sb.append(cmd.getTargetExecutor().charAt(0)).append(",");
                //check-if-executor-is-player flag (bit0)
                int cFlag = cmd.isCheckIfExecutorIsPlayer() ? 1 : 0;
                sb.append(Integer.toString(cFlag, 36));
            }
        }

        return sb.toString();
    }


    public String compress(String input) {
        byte[] in = input.getBytes(StandardCharsets.UTF_8);
        byte[] compressed = Zstd.compress(in, 22);
        return Base64.getUrlEncoder()
                     .withoutPadding()
                     .encodeToString(compressed);
    }

    //"." for null/empty.
    private String encodeField(String value) {
        if (value == null || value.isEmpty()) return ".";
        return value.replace(",", "\\,").replace(";", "\\;");
    }

    //* join with '|' or return "." if empty
    private String encodeList(List<String> list) {
        if (list == null || list.isEmpty()) return ".";
        StringBuilder sb = new StringBuilder();
        Iterator<String> it = list.iterator();
        while (it.hasNext()) {
            sb.append(encodeField(it.next()));
            if (it.hasNext()) sb.append("|");
        }
        return sb.toString();
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/helper/command/DumpCommand.java">
package dev.objz.commandbridge.velocity.helper.command;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.velocitypowered.api.command.CommandSource;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.json.MessageBuilder;
import dev.objz.commandbridge.velocity.core.Runtime;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;

import java.util.Set;

public class DumpCommand {
    public static LiteralArgumentBuilder<CommandSource> build(Set<String> connectedClients, Logger logger) {
        return LiteralArgumentBuilder.<CommandSource>literal("dump")
                .executes(context -> {
                    CommandSource source = context.getSource();

                    if (!source.hasPermission("commandbridge.admin")) {
                        source.sendMessage(Component.text("You do not have permission to list connected clients",
                                NamedTextColor.RED));
                        return 0;
                    }

                    MessageBuilder builder = new MessageBuilder("system");
                    builder.addToBody("channel", "task").addToBody("task", "dump")
                            .addToBody("server", Runtime.getInstance().getConfig().getKey("config.yml", "server-id"));

                    Runtime.getInstance().getServer().broadcastServerMessage(builder.build());

                    String compact = Runtime.getInstance().getEncoder().encode();
                    String compressed;

                    try {
                        compressed = Runtime.getInstance().getEncoder().compress(compact);
                    } catch (Exception e) {
                        logger.error("Failed to compress the dump data: {}", logger.getDebug() ? e : e.getMessage());
                        source.sendMessage(
                                Component.text("Error while processing dump data").color(NamedTextColor.RED));
                        return 0;
                    }

                    source.sendMessage(Component.text(compact).color(NamedTextColor.LIGHT_PURPLE));
                    source.sendMessage(Component.text("===== Dumped Data =======").color(NamedTextColor.GOLD));
                    source.sendMessage(Component.text(compressed).color(NamedTextColor.GREEN));
                    source.sendMessage(Component.text("============================").color(NamedTextColor.GOLD));

                    return 1;
                });
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/util/Encoder.java">
package dev.objz.commandbridge.velocity.util;

import com.github.luben.zstd.Zstd;
import dev.objz.commandbridge.core.utils.ScriptManager.Command;
import dev.objz.commandbridge.core.utils.ScriptManager.ScriptConfig;
import dev.objz.commandbridge.velocity.Main;
import dev.objz.commandbridge.velocity.core.Runtime;

import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class Encoder {
    private final Map<String, ScriptConfig> scripts = new LinkedHashMap<>();

    private final Map<String, String> clientsScripts = new HashMap<>();

    public void addScriptConfig(ScriptConfig config) {
        if (config == null || config.getName() == null) {
            throw new IllegalArgumentException("ScriptConfig or name cannot be null");
        }
        scripts.put(config.getName(), config);
    }

    public String encode() {
        StringBuilder sb = new StringBuilder();

        //header
        sb.append("V").append("/").append(System.getProperty("java.version")).append("/").append(Main.getInstance().getVelocityVersion()).append("/").append(Main.getVersion());

        for (ScriptConfig script : scripts.values()) {
            sb.append("@");

            //name
            sb.append(encodeField(script.getName())).append(",");

            //aliases
            sb.append(encodeList(script.getAliases())).append(",");

            //script flags: bit2=enabled, bit1=ignorePerm, bit0=hideWarn
            int scriptFlags =
                  (script.isEnabled()                    ? 1 << 2 : 0)
                | (script.shouldIgnorePermissionCheck()? 1 << 1 : 0)
                | (script.shouldHidePermissionWarning()? 1 << 0 : 0);
            sb.append(Integer.toString(scriptFlags, 36));

            //commands
            for (Command cmd : script.getCommands()) {
                sb.append(";");
                sb.append(encodeField(cmd.getCommand())).append(",");                  // command
                sb.append(cmd.getDelay()).append(",");                                 // delay
                sb.append(encodeList(cmd.getTargetClientIds())).append(",");           // targets
                sb.append(cmd.getTargetExecutor().charAt(0)).append(",");              // executor: 'p'/'c'

                //command flags: bit2=waitOnline, bit1=checkPlayer, bit0=checkOnServer
                int cmdFlags =
                      (cmd.shouldWaitUntilPlayerIsOnline() ? 1 << 2 : 0)
                    | (cmd.isCheckIfExecutorIsPlayer()    ? 1 << 1 : 0)
                    | (cmd.isCheckIfExecutorIsOnServer()  ? 1 << 0 : 0);
                sb.append(Integer.toString(cmdFlags, 36));
            }
        }

        for (Map.Entry<String, String> entry : clientsScripts.entrySet()) {
            sb.append("#");
            sb.append(encodeField(entry.getKey())).append(","); // clientId
            sb.append(encodeField(entry.getValue()));           // encoded string
        }

        return sb.toString();
    }

    public void addClient(String clientId, String encodedString) {
        if (clientId == null || clientId.isEmpty() || encodedString == null || encodedString.isEmpty()) {
            throw new IllegalArgumentException("Client ID and encoded string cannot be null or empty");
        }
        clientsScripts.put(clientId, encodedString);
    }

    public String compress(String input) {
        byte[] in = input.getBytes(StandardCharsets.UTF_8);
        byte[] compressed = Zstd.compress(in, 22);
        return Base64.getUrlEncoder()
                     .withoutPadding()
                     .encodeToString(compressed);
    }

    //"." for null/empty.
    private String encodeField(String value) {
        if (value == null || value.isEmpty()) return ".";
        return value.replace(",", "\\,").replace(";", "\\;");
    }

    //* join with '|' or return "." if empty
    private String encodeList(List<String> list) {
        if (list == null || list.isEmpty()) return ".";
        StringBuilder sb = new StringBuilder();
        Iterator<String> it = list.iterator();
        while (it.hasNext()) {
            sb.append(encodeField(it.next()));
            if (it.hasNext()) sb.append("|");
        }
        return sb.toString();
    }
}
</file>

<file path="velocity/src/main/resources/velocity-config.yml">
# Server Configuration File

# General debug mode.
# Set to true for detailed logs and diagnostics, or false for standard logging.
debug: false

# Unique identifier for the server.
# This helps distinguish between multiple servers in a network setup.
server-id: "main"

# The host address the server will bind to.
# You can use "127.0.0.1" to bind to the localhost interface (local connections only),
# or "0.0.0.0" to bind to all available network interfaces (accepts connections from all IPs).
# Change only if you know what you're doing.
host: "0.0.0.0"

# Server Address Name (SAN).
# Specify your server's public IP or domain name here if accessible from external networks.
# Example: san: "152.248.198.124"
san: ""

# The port number the server will listen on.
# Ensure this port is open and not used by another service.
port: 8080

# Timeout for the reload command.
# Specifies the time (in seconds) for clients to respond during a reload operation.
# Each second represents one retry for the client to send a successful request.
# If the client does not respond successfully within the timeout duration, the operation will fail.
# Example: timeout: 8 means clients have up to 8 seconds (or 8 tries) to respond.
timeout: 8
</file>

<file path=".gitignore">
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### IntelliJ IDEA ###
.idea/modules.xml
.idea/jarRepositories.xml
.idea/compiler.xml
.idea/libraries/
.idea/workspace.xml
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### Eclipse ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/

### Mac OS ###
.DS_Store


kls_database.db
</file>

<file path="gradlew">
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
</file>

<file path="gradlew.bat">
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
</file>

<file path=".github/ISSUE_TEMPLATE/bug_report.md">
---
name: Bug report
about: Create a report to help us improve
title: "[BUG}"
labels: bug
assignees: 72-S

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Server (please complete the following information):**
- OS: [e.g. Linux]
- Minecraft Version: [e.g. 1.20.6]
- Plugin Version: [e.g. 1.0.0]
- Java Version: [e.g. 21]

**Client (please complete the following information):**
- Device: [e.g. PC]
- OS: [e.g. Windows 10]
- Minecraft Version: [e.g. 1.20.6]
- Java Version: [e.g. 21]

**Troubleshooting Checklist:**
- [ ] Installed the newest version of the plugin
- [ ] Checked compatibility with the current Minecraft version
- [ ] Verified Java version is compatible
- [ ] Tested with a fresh server setup (no other plugins)

**Additional context**
Add any other context about the problem here.
</file>

<file path=".github/ISSUE_TEMPLATE/feature_request.md">
---
name: Feature request
about: Suggest an idea for this project
title: "[FEATURE-REQUEST]"
labels: feature
assignees: 72-S

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
</file>

<file path=".github/dependabot.yml">
---
version: 2
updates:
  - package-ecosystem: "gradle"
    directory: "/"
    schedule:
      interval: "weekly"
</file>

<file path="core/src/main/java/dev/objz/commandbridge/core/json/MessageBuilder.java">
package dev.objz.commandbridge.core.json;

import java.time.Instant;

import org.json.JSONObject;

public class MessageBuilder {

    private final JSONObject jsonObject;
    private final JSONObject bodyObject;

    public MessageBuilder(String type) {
        jsonObject = new JSONObject();
        bodyObject = new JSONObject();

        jsonObject.put("type", type);
        jsonObject.put("body", bodyObject);
        jsonObject.put("timestamp", Instant.now().toString());
    }

    public MessageBuilder addToBody(String key, Object value) {
        bodyObject.put(key, value);
        return this;
    }

    public MessageBuilder withStatus(String status) {
        jsonObject.put("status", status);
        return this;
    }

    public JSONObject build() {
        return jsonObject;
    }

}
</file>

<file path="core/src/main/java/dev/objz/commandbridge/core/json/MessageParser.java">
package dev.objz.commandbridge.core.json;

import org.json.JSONArray;
import org.json.JSONObject;

public class MessageParser {

    private final JSONObject jsonObject;

    public MessageParser(String jsonString) {
        jsonObject = new JSONObject(jsonString);
    }

    public String getType() {
        return jsonObject.optString("type", null);
    }

    public String getStatus() {
        return jsonObject.optString("status", null);
    }

    public String getTimestamp() {
        return jsonObject.optString("timestamp", null);
    }

    public JSONObject getBody() {
        return jsonObject.optJSONObject("body");
    }

    public Object getBodyValue(String key) {
        JSONObject body = getBody();
        return body != null ? body.opt(key) : null;
    }

    public String getBodyValueAsString(String key) {
        return (String) getBodyValue(key);
    }

    public int getBodyValueAsInt(String key) {
        Object value = getBodyValue(key);
        return value instanceof Integer ? (int) value : 0;
    }

    public boolean getBodyValueAsBoolean(String key) {
        Object value = getBodyValue(key);
        return value instanceof Boolean && (boolean) value;
    }

    public JSONArray getBodyValueAsArray(String key) {
        Object value = getBodyValue(key);
        return value instanceof JSONArray ? (JSONArray) value : null;
    }

    public JSONObject getBodyValueAsObject(String key) {
        Object value = getBodyValue(key);
        return value instanceof JSONObject ? (JSONObject) value : null;
    }

    public boolean containsBodyKey(String key) {
        JSONObject body = getBody();
        return body != null && body.has(key);
    }
}
</file>

<file path="core/src/main/java/dev/objz/commandbridge/core/utils/ConfigManager.java">
package dev.objz.commandbridge.core.utils;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;

import dev.objz.commandbridge.core.Logger;

public class ConfigManager {

    private final Map<String, Map<String, Object>> configData = new HashMap<>();
    private String secret;
    private final Yaml yaml;
    private final Logger logger;
    private final String configDirectory;
    private final String secretFileName;

    public ConfigManager(Logger logger, String pluginName) {
        this(logger, pluginName, "secret.key");
    }

    public ConfigManager(Logger logger, String pluginName, String secretFileName) {
        this.logger = logger;
        this.configDirectory = "plugins" + File.separator + (pluginName != null ? pluginName : "FoundationLib");
        this.secretFileName = secretFileName;

        DumperOptions options = new DumperOptions();
        options.setIndent(2);
        options.setPrettyFlow(true);
        options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
        yaml = new Yaml(options);
    }

    public void loadAllConfigs() {
        File configDir = new File(configDirectory);
        if (!configDir.exists() && !configDir.mkdirs()) {
            throw new RuntimeException("Failed to create config directory: " + configDirectory);
        }

        try {
            Files.list(configDir.toPath())
                    .filter(path -> path.toString().endsWith(".yml"))
                    .forEach(this::loadConfigFile);

            logger.debug("All configuration files have been loaded from directory: {}", configDirectory);
        } catch (IOException e) {
            throw new RuntimeException("Failed to load configuration files: " + e.getMessage(), e);
        }
    }

    public void reload() {
        configData.clear();

        loadAllConfigs();

        logger.info("All configurations have been successfully reloaded");
    }

    private void loadConfigFile(Path path) {
        try (InputStream inputStream = Files.newInputStream(path)) {
            Map<String, Object> fileconfigData = yaml.load(inputStream);
            if (fileconfigData == null) {
                fileconfigData = new HashMap<>();
            }
            configData.put(path.getFileName().toString(), fileconfigData);
            logger.debug("Config file loaded successfully: {}", path.getFileName().toString());
        } catch (IOException e) {
            throw new RuntimeException("Failed to load config file: " + e.getMessage(), e);
        }
    }

    public void loadSecret() {
        File secretFile = new File(configDirectory, secretFileName);

        if (!secretFile.exists()) {
            generateSecret();
        }
        try (InputStream inputStream = Files.newInputStream(secretFile.toPath())) {
            secret = new String(inputStream.readAllBytes());
            logger.debug("Secret file loaded successfully from path: {}", secretFile.getAbsolutePath());
        } catch (IOException e) {
            throw new RuntimeException("Failed to load secret file: " + e.getMessage(), e);
        }
    }

    public String getKey(String fileName, String key) {
        Map<String, Object> fileConfigData = configData.get(fileName);
        if (fileConfigData != null && fileConfigData.containsKey(key)) {
            logger.debug("Retrieved key '{}' from config: {}", key, fileName);
            return fileConfigData.get(key).toString();
        } else {
            throw new RuntimeException("Key '" + key + "' not found in config: " + fileName);
        }
    }

    public String getSecret() {
        if (secret != null) {
            logger.debug("Retrieved secret");
            return secret;
        } else {
            logger.error("Secret not found");
            return null;
        }
    }

    protected void generateSecret() {
        File configDir = new File(configDirectory);
        if (!configDir.exists() && !configDir.mkdirs()) {
            throw new RuntimeException("Failed to create config directory: " + configDirectory);
        }

        File secretFile = new File(configDir, secretFileName);

        if (secretFile.exists()) {
            logger.debug("Secret file already exists, skipping copy");
            return;
        }

        try (OutputStream out = Files.newOutputStream(secretFile.toPath())) {
            String secret = TLSUtils.generateSecret();
            out.write(secret.getBytes());
            logger.info("Secret file generated successfully at: {}", secretFile.getAbsolutePath());
        } catch (IOException e) {
            throw new RuntimeException("Failed to generate secret file: " + e.getMessage(), e);
        }
    }

    public void copyConfig(String resourceName, String targetFileName) {
        File configDir = new File(configDirectory);
        if (!configDir.exists() && !configDir.mkdirs()) {
            throw new RuntimeException("Failed to create config directory: " + configDirectory);
        }

        File configFile = new File(configDir, targetFileName);

        if (configFile.exists()) {
            logger.debug("Config file '{}' already exists, skipping copy", configFile.getAbsolutePath());
            return;
        }

        try (InputStream in = getClass().getResourceAsStream("/" + resourceName);
                OutputStream out = Files.newOutputStream(configFile.toPath())) {
            if (in == null) {
                throw new RuntimeException("Resource '" + resourceName + "' not found in the plugin JAR");
            }

            byte[] buffer = new byte[1024];
            int len;
            while ((len = in.read(buffer)) != -1) {
                out.write(buffer, 0, len);
            }
            logger.info("Default config '{}' copied to: {}", resourceName, configFile.getAbsolutePath());
        } catch (IOException e) {
            throw new RuntimeException("Failed to copy default config file " + resourceName + ": " + e.getMessage(), e);
        }
    }
}
</file>

<file path="core/src/main/java/dev/objz/commandbridge/core/utils/StringParser.java">
package dev.objz.commandbridge.core.utils;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class StringParser {
    private final Map<String, String> placeholders = new HashMap<>();
    private static final Pattern PLACEHOLDER_PATTERN = Pattern.compile("%([^%]+)%");

    public void add(String placeholder, String value) {
        placeholders.put(placeholder, value);
    }

    public void remove(String placeholder) {
        placeholders.remove(placeholder);
    }

    public String parse(String command, String[] args) {
        if (!placeholders.isEmpty()) {
            for (Map.Entry<String, String> entry : placeholders.entrySet()) {
                String placeholder = entry.getKey();
                String value = entry.getValue();
                command = command.replace(placeholder, value != null ? value : "");
            }
        }

        command = command.replace("%args%", args != null ? String.join(" ", args) : "");

        if (args != null) {
            command = replaceArgs(command, args);
        }

        return command;
    }

    public Result validate(String command, String[] args) {
        Set<String> unresolved = new HashSet<>();
        Set<String> found = findAll(command);

        for (String placeholder : found) {
            if (placeholder.equals("%args%")) {
                continue;
            }

            if (placeholder.matches("%arg\\[\\d+\\]%")) {
                Pattern argPattern = Pattern.compile("%arg\\[(\\d+)\\]%");
                Matcher matcher = argPattern.matcher(placeholder);
                if (matcher.find()) {
                    int index = Integer.parseInt(matcher.group(1));
                    if (args == null || index >= args.length) {
                        unresolved.add(placeholder);
                    }
                }
                continue;
            }

            if (!placeholders.containsKey(placeholder)) {
                unresolved.add(placeholder);
            }
        }

        String parsed = parse(command, args);
        return new Result(parsed, unresolved, unresolved.isEmpty());
    }

    private Set<String> findAll(String command) {
        Set<String> placeholders = new HashSet<>();
        Matcher matcher = PLACEHOLDER_PATTERN.matcher(command);

        while (matcher.find()) {
            placeholders.add(matcher.group(0));
        }

        return placeholders;
    }

    public void clear() {
        placeholders.clear();
    }

    private String replaceArgs(String command, String[] args) {
        Pattern pattern = Pattern.compile("%arg\\[(\\d+)]%");
        Matcher matcher = pattern.matcher(command);
        StringBuilder result = new StringBuilder();

        while (matcher.find()) {
            int index = Integer.parseInt(matcher.group(1));
            String replacement = (index >= 0 && index < args.length) ? args[index] : "";
            matcher.appendReplacement(result, Matcher.quoteReplacement(replacement));
        }

        matcher.appendTail(result);
        return result.toString();
    }

    public static StringParser create() {
        return new StringParser();
    }

    public static class Result {
        private final String parsed;
        private final Set<String> unresolved;
        private final boolean valid;

        public Result(String parsed, Set<String> unresolved, boolean valid) {
            this.parsed = parsed;
            this.unresolved = unresolved;
            this.valid = valid;
        }

        public String getParsed() {
            return parsed;
        }

        public Set<String> getUnresolved() {
            return unresolved;
        }

        public boolean isValid() {
            return valid;
        }
    }
}
</file>

<file path="core/src/main/java/dev/objz/commandbridge/core/utils/TLSUtils.java">
package dev.objz.commandbridge.core.utils;

import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.security.Security;
import java.security.cert.X509Certificate;
import java.util.Date;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.bouncycastle.asn1.x500.X500Name;
import org.bouncycastle.asn1.x509.ExtendedKeyUsage;
import org.bouncycastle.asn1.x509.Extension;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.GeneralNames;
import org.bouncycastle.asn1.x509.KeyPurposeId;
import org.bouncycastle.asn1.x509.KeyUsage;
import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.cert.X509v3CertificateBuilder;
import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;
import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.operator.ContentSigner;
import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;

public final class TLSUtils {

    private TLSUtils() {
        throw new UnsupportedOperationException("TLSUtils is a utility class and cannot be instantiated.");
    }

    public static SSLContext createServerSSLContext(String SAN) throws Exception {
        bouncyCastleProvider();
        KeyPair keyPair = generateKeyPair();
        X509Certificate certificate = generateSelfSignedCertificate(keyPair, SAN);
        KeyStore keyStore = KeyStore.getInstance("JKS");
        keyStore.load(null, null);
        keyStore.setKeyEntry("server", keyPair.getPrivate(), "password".toCharArray(),
                new X509Certificate[] { certificate });

        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        kmf.init(keyStore, "password".toCharArray());

        SSLContext sslContext = SSLContext.getInstance("TLSv1.3");
        sslContext.init(kmf.getKeyManagers(), null, new SecureRandom());
        return sslContext;
    }

    private static void bouncyCastleProvider() {
        if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {
            Security.addProvider(new BouncyCastleProvider());
        }
    }

    public static SSLContext createClientSSLContext() throws Exception {
        TrustManager[] trustAllCerts = new TrustManager[] {
                new X509TrustManager() {
                    public void checkClientTrusted(X509Certificate[] certs, String authType) {
                    }

                    public void checkServerTrusted(X509Certificate[] certs, String authType) {
                    }

                    public X509Certificate[] getAcceptedIssuers() {
                        return new X509Certificate[0];
                    }
                }
        };

        SSLContext sslContext = SSLContext.getInstance("TLSv1.3");
        sslContext.init(null, trustAllCerts, new SecureRandom());
        return sslContext;
    }

    private static X509Certificate generateSelfSignedCertificate(KeyPair keyPair, String SAN) throws Exception {
        X500Name issuer = new X500Name("CN=Server");
        BigInteger serial = BigInteger.valueOf(System.currentTimeMillis());
        Date notBefore = new Date(System.currentTimeMillis() - 10000);
        Date notAfter = new Date(System.currentTimeMillis() + 365L * 86400000L);

        X509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(
                issuer, serial, notBefore, notAfter, issuer, keyPair.getPublic());

        certBuilder.addExtension(
                Extension.keyUsage,
                true,
                new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));

        GeneralName sanName = SAN.matches("\\d+\\.\\d+\\.\\d+\\.\\d+")
                ? new GeneralName(GeneralName.iPAddress, SAN)
                : new GeneralName(GeneralName.dNSName, SAN);
        GeneralNames subjectAltNames = new GeneralNames(new GeneralName[] {
                new GeneralName(GeneralName.dNSName, "localhost"),
                new GeneralName(GeneralName.iPAddress, "127.0.0.1"),
                sanName
        });
        certBuilder.addExtension(Extension.subjectAlternativeName, false, subjectAltNames);

        certBuilder.addExtension(
                Extension.extendedKeyUsage,
                false,
                new ExtendedKeyUsage(KeyPurposeId.id_kp_serverAuth));

        ContentSigner signer = new JcaContentSignerBuilder("SHA256WithRSAEncryption").build(keyPair.getPrivate());
        X509CertificateHolder certHolder = certBuilder.build(signer);
        return new JcaX509CertificateConverter().setProvider("BC").getCertificate(certHolder);
    }

    private static KeyPair generateKeyPair() throws Exception {
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
        keyGen.initialize(2048);
        return keyGen.generateKeyPair();
    }

    public static String generateSecret() {
        return new BigInteger(256, new SecureRandom()).toString(32);
    }
}
</file>

<file path="core/src/main/java/dev/objz/commandbridge/core/utils/VersionChecker.java">
package dev.objz.commandbridge.core.utils;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.regex.Pattern;

import org.json.JSONArray;
import org.json.JSONObject;

public class VersionChecker {

    private static String projectId;
    private static String MODRINTH_API_URL;
    private static final Pattern VERSION_PATTERN = Pattern.compile("\\d+");

    public static void setProjectId(String id) {
        projectId = id;
        MODRINTH_API_URL = "https://api.modrinth.com/v2/project/" + projectId + "/version";
    }

    public static String getLatestVersion() {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(MODRINTH_API_URL))
                .build();

        try {
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            String responseBody = response.body();

            JSONArray versions = new JSONArray(responseBody);

            if (!versions.isEmpty()) {
                JSONObject latestVersion = versions.getJSONObject(0);
                return latestVersion.getString("version_number");
            }
        } catch (IOException | InterruptedException ignored) {
        }
        return null;
    }

    public static boolean isNewerVersion(String latestVersion, String currentVersion) {
        String[] latestParts = latestVersion.split("\\.");
        String[] currentParts = currentVersion.split("\\.");

        int length = Math.max(latestParts.length, currentParts.length);
        for (int i = 0; i < length; i++) {
            int latestPart = i < latestParts.length ? parseVersionPart(latestParts[i]) : 0;
            int currentPart = i < currentParts.length ? parseVersionPart(currentParts[i]) : 0;

            if (latestPart > currentPart) {
                return true;
            } else if (latestPart < currentPart) {
                return false;
            }
        }
        return false;
    }

    private static int parseVersionPart(String versionPart) {
        var matcher = VERSION_PATTERN.matcher(versionPart);
        if (matcher.find()) {
            return Integer.parseInt(matcher.group());
        }
        return 0;
    }

    public static String getDownloadUrl() {
        return "https://modrinth.com/plugin/" + projectId + "/versions";
    }

    public static boolean checkBukkitVersion(String bukkitVersion, String currentVersion) {
        String[] bukkitParts = bukkitVersion.split("\\.");
        String[] currentParts = currentVersion.split("\\.");

        for (int i = 0; i < Math.min(bukkitParts.length, currentParts.length); i++) {
            if (!bukkitParts[i].equals(currentParts[i])) {
                return false;
            }
        }
        return bukkitParts.length == currentParts.length;
    }
}
</file>

<file path="core/src/main/java/dev/objz/commandbridge/core/websocket/WebSocketClient.java">
package dev.objz.commandbridge.core.websocket;

import java.net.URI;
import java.util.concurrent.TimeUnit;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLEngine;

import org.json.JSONException;
import org.json.JSONObject;

import dev.objz.commandbridge.core.json.MessageBuilder;
import dev.objz.commandbridge.core.json.MessageParser;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.TLSUtils;
import io.netty.bootstrap.Bootstrap;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.http.DefaultHttpHeaders;
import io.netty.handler.codec.http.FullHttpResponse;
import io.netty.handler.codec.http.HttpClientCodec;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
import io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
import io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;
import io.netty.handler.codec.http.websocketx.WebSocketVersion;
import io.netty.handler.ssl.SslHandler;

public abstract class WebSocketClient {

    private Channel channel;
    private EventLoopGroup group;
    private final Logger logger;
    private final String secret;
    private URI uri;
    private WebSocketClientHandshaker handshaker;

    public WebSocketClient(Logger logger, String secret) {
        this.logger = logger;
        this.secret = secret;
    }

    public void connect(String address, int port) {
        try {
            this.uri = new URI("wss://" + address + ":" + port);
            group = new NioEventLoopGroup();

            final SSLContext sslContext = TLSUtils.createClientSSLContext();
            if (sslContext == null) {
                throw new RuntimeException("Failed to initialize SSL context");
            }
            Bootstrap bootstrap = new Bootstrap();
            bootstrap.group(group)
                    .channel(NioSocketChannel.class)
                    .handler(new ChannelInitializer<SocketChannel>() {
                        @Override
                        protected void initChannel(SocketChannel ch) throws Exception {
                            SSLEngine sslEngine = sslContext.createSSLEngine();
                            sslEngine.setUseClientMode(true);

                            ChannelPipeline pipeline = ch.pipeline();
                            pipeline.addLast(new SslHandler(sslEngine));
                            pipeline.addLast(new HttpClientCodec());
                            pipeline.addLast(new HttpObjectAggregator(8192));
                            pipeline.addLast(new WebSocketClientHandler());
                        }
                    });

            handshaker = WebSocketClientHandshakerFactory.newHandshaker(
                    uri, WebSocketVersion.V13, null, false, new DefaultHttpHeaders());

            logger.info("Attempting to connect to server at: {}:{}", address, port);
            ChannelFuture future = bootstrap.connect(uri.getHost(), port).sync();
            channel = future.channel();

        } catch (Exception e) {
            throw new RuntimeException("Connection failed", e);
        }
    }

    public void disconnect() {
        if (channel != null && channel.isActive()) {
            try {
                channel.writeAndFlush(new CloseWebSocketFrame());
                channel.closeFuture().await(5, TimeUnit.SECONDS);
                logger.info("Disconnected successfully");
            } catch (Exception e) {
                throw new RuntimeException("Failed to disconnect WebSocket client", e);
            } finally {
                group.shutdownGracefully();
            }
        } else {
            logger.warn("Client is not connected, so no need to disconnect");
        }
    }

    public void sendMessage(JSONObject message) {
        if (channel != null && channel.isActive()) {
            channel.writeAndFlush(new TextWebSocketFrame(message.toString()));
        } else {
            logger.warn("Client is not connected, so cannot send message");
        }
    }

    private void handleMessage(String message) {
        try {
            MessageParser parser = new MessageParser(message);
            if (parser.getType().equals("auth")) {
                String status = parser.getStatus();

                switch (status) {
                    case "authenticated" -> {
                        logger.info("Authentication succeeded");
                        afterAuth();
                    }
                    case "unauthenticated" -> {
                        logger.error("Authentication failed");
                        channel.close();
                    }
                    case "error" ->
                        logger.warn("Received error from server: {}", parser.getBodyValueAsString("message"));
                    case null, default -> logger.error("Received not a valid status");
                }

            } else {
                onMessage(message);
            }
        } catch (JSONException e) {
            logger.error("Failed to parse message: {}", logger.getDebug() ? e : e.getMessage());
        }
    }

    protected abstract void onMessage(String message);

    protected abstract void afterAuth();

    private class WebSocketClientHandler extends SimpleChannelInboundHandler<Object> {

        @Override
        public void channelActive(ChannelHandlerContext ctx) {
            handshaker.handshake(ctx.channel());
        }

        @Override
        public void channelInactive(ChannelHandlerContext ctx) {
            logger.info("WebSocket Client disconnected!");
        }

        @Override
        protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {
            Channel ch = ctx.channel();

            if (!handshaker.isHandshakeComplete()) {
                handshaker.finishHandshake(ch, (FullHttpResponse) msg);
                logger.info("Connected to server: {}", uri);

                MessageBuilder builder = new MessageBuilder("auth");
                builder.addToBody("secret", secret);
                JSONObject authMessage = builder.build();
                ch.writeAndFlush(new TextWebSocketFrame(authMessage.toString()));
                return;
            }

            if (msg instanceof TextWebSocketFrame) {
                TextWebSocketFrame textFrame = (TextWebSocketFrame) msg;
                handleMessage(textFrame.text());
            } else if (msg instanceof CloseWebSocketFrame) {
                ch.close();
            }
        }

        @Override
        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
            logger.error("An error occurred: {}", logger.getDebug() ? cause : cause.getMessage());
            ctx.close();
        }
    }
}
</file>

<file path="core/src/main/java/dev/objz/commandbridge/core/websocket/WebSocketServer.java">
package dev.objz.commandbridge.core.websocket;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLEngine;

import org.json.JSONException;
import org.json.JSONObject;

import dev.objz.commandbridge.core.json.MessageBuilder;
import dev.objz.commandbridge.core.json.MessageParser;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.TLSUtils;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.HttpServerCodec;
import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
import io.netty.handler.codec.http.websocketx.WebSocketFrame;
import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;
import io.netty.handler.ssl.SslHandler;

public abstract class WebSocketServer {

    private final Logger logger;
    private Channel serverChannel;
    private EventLoopGroup bossGroup;
    private EventLoopGroup workerGroup;
    private final Set<Channel> connections = Collections.synchronizedSet(new HashSet<>());
    private final Set<Channel> pendingAuthConnections = Collections.synchronizedSet(new HashSet<>());
    private final String secret;
    private final int authTimeoutMillis = 5000;
    private InetSocketAddress serverAddress;

    private final List<ChannelHandler> extraHandlers = new ArrayList<>();

    public WebSocketServer(Logger logger, String secret) {
        this.logger = logger;
        this.secret = secret;
    }

    public boolean isRunning() {
        if (serverChannel == null) {
            return false;
        }

        try {
            if (serverAddress != null && isPortInUse(serverAddress.getPort())) {
                return true;
            }
        } catch (Exception e) {
            logger.error("Error checking server status: {}", logger.getDebug() ? e : e.getMessage());
        }
        return false;
    }

    public void addHttpHandler(ChannelHandler handler) {
        extraHandlers.add(handler);
    }

    public Set<Channel> getConnections() {
        return connections;
    }

    private boolean isPortInUse(int port) {
        try (ServerSocket serverSocket = new ServerSocket(port)) {
            serverSocket.setReuseAddress(true);
            return false;
        } catch (IOException e) {
            return true;
        }
    }

    public void startServer(int port, String address, String SAN) {
        if (isRunning()) {
            throw new RuntimeException("WebSocket server is already running on " + address + ":" + port);
        }
        try {
            this.serverAddress = new InetSocketAddress(address, port);

            final SSLContext sslContext = TLSUtils.createServerSSLContext(SAN);
            if (sslContext == null) {
                throw new RuntimeException("Failed to initialize SSL context");
            }

            bossGroup = new NioEventLoopGroup(1);
            workerGroup = new NioEventLoopGroup();

            ServerBootstrap bootstrap = new ServerBootstrap();
            bootstrap.group(bossGroup, workerGroup)
                    .channel(NioServerSocketChannel.class)
                    .childHandler(new ChannelInitializer<SocketChannel>() {
                        @Override
                        protected void initChannel(SocketChannel ch) throws Exception {
                            SSLEngine sslEngine = sslContext.createSSLEngine();
                            sslEngine.setUseClientMode(false);

                            ChannelPipeline pipeline = ch.pipeline();
                            pipeline.addLast(new SslHandler(sslEngine));
                            pipeline.addLast(new HttpServerCodec());
                            pipeline.addLast(new HttpObjectAggregator(65536));

                            for (ChannelHandler handler : extraHandlers) {
                                pipeline.addLast(handler);
                            }

                            pipeline.addLast(new WebSocketServerProtocolHandler("/", null, true));
                            pipeline.addLast(new WebSocketFrameHandler());
                        }
                    });

            ChannelFuture future = bootstrap.bind(serverAddress).sync();
            serverChannel = future.channel();

            logger.info("WebSocket server started on: {}:{}", address, port);

        } catch (Exception e) {
            throw new RuntimeException("Error starting WebSocket server", e);
        }
    }

    public void stopServer(int timeout) {
        if (serverChannel != null) {
            try {
                logger.debug("Closing all client connections...");
                for (Channel conn : connections) {
                    conn.writeAndFlush(new CloseWebSocketFrame(1001, "Server shutdown"));
                    conn.close();
                }

                connections.clear();
                pendingAuthConnections.clear();

                serverChannel.close().sync();

                if (bossGroup != null) {
                    bossGroup.shutdownGracefully(0, timeout, java.util.concurrent.TimeUnit.MILLISECONDS).sync();
                }
                if (workerGroup != null) {
                    workerGroup.shutdownGracefully(0, timeout, java.util.concurrent.TimeUnit.MILLISECONDS).sync();
                }

                serverChannel = null;
                bossGroup = null;
                workerGroup = null;
                logger.info("WebSocket server stopped successfully");
            } catch (InterruptedException e) {
                throw new RuntimeException("Failed to stop WebSocket server gracefully", e);
            }
        } else {
            logger.warn("WebSocket server is not running.");
        }
    }

    public void sendMessage(JSONObject message, Channel conn) {
        conn.writeAndFlush(new TextWebSocketFrame(message.toString()));
    }

    private void handleMessage(ChannelHandlerContext ctx, String message) {
        Channel conn = ctx.channel();
        try {
            MessageParser parser = new MessageParser(message);
            if (parser.getType().equals("auth")) {
                pendingAuthConnections.remove(conn);
                String receivedSecret = parser.getBodyValueAsString("secret");
                MessageBuilder builder = new MessageBuilder("auth");
                if (receivedSecret.equals(secret)) {
                    logger.info("Client authenticated successfully: {}", conn.remoteAddress());
                    connections.add(conn);
                    builder.withStatus("authenticated");
                    sendMessage(builder.build(), conn);
                } else {
                    logger.warn("Client failed to authenticate: {}", conn.remoteAddress());
                    builder.withStatus("unauthenticated");
                    sendMessage(builder.build(), conn);
                    conn.close();
                }
            } else if (connections.contains(conn)) {
                onMessage(conn, message);
            }
        } catch (JSONException e) {
            logger.error("Failed to parse message: {}", logger.getDebug() ? e : e.getMessage());
        }
    }

    protected abstract void onMessage(Channel conn, String message);

    protected abstract void onConnectionClose(Channel conn, int code, String reason);

    public void broadcastClientMessage(JSONObject message, Channel client) {
        synchronized (connections) {
            for (Channel conn : connections) {
                if (conn != client) {
                    sendMessage(message, conn);
                }
            }
        }
    }

    public void broadcastServerMessage(JSONObject message) {
        synchronized (connections) {
            for (Channel conn : connections) {
                sendMessage(message, conn);
            }
        }
        logger.debug("Broadcast server message");
    }

    private class WebSocketFrameHandler extends SimpleChannelInboundHandler<WebSocketFrame> {

        @Override
        public void channelActive(ChannelHandlerContext ctx) {
            Channel conn = ctx.channel();
            pendingAuthConnections.add(conn);

            Timer authTimer = new Timer();
            authTimer.schedule(new TimerTask() {
                @Override
                public void run() {
                    if (pendingAuthConnections.contains(conn)) {
                        MessageBuilder builder = new MessageBuilder("auth");
                        builder.addToBody("message", "Authentication timeout.");
                        builder.withStatus("error");
                        conn.writeAndFlush(new TextWebSocketFrame(builder.build().toString()));
                        conn.close();
                    }
                }
            }, authTimeoutMillis);
        }

        @Override
        public void channelInactive(ChannelHandlerContext ctx) {
            Channel conn = ctx.channel();
            connections.remove(conn);
            pendingAuthConnections.remove(conn);
            onConnectionClose(conn, 1000, "Connection closed");
        }

        @Override
        protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) throws Exception {
            if (frame instanceof TextWebSocketFrame) {
                TextWebSocketFrame textFrame = (TextWebSocketFrame) frame;
                handleMessage(ctx, textFrame.text());
            } else if (frame instanceof CloseWebSocketFrame) {
                CloseWebSocketFrame closeFrame = (CloseWebSocketFrame) frame;
                ctx.close();
                onConnectionClose(ctx.channel(), closeFrame.statusCode(), closeFrame.reasonText());
            }
        }

        @Override
        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
            logger.error("An error occurred: {}", logger.getDebug() ? cause : cause.getMessage());
            ctx.close();
        }
    }
}
</file>

<file path="core/src/main/java/dev/objz/commandbridge/core/Logger.java">
package dev.objz.commandbridge.core;

import org.slf4j.LoggerFactory;

public class Logger {
    private final org.slf4j.Logger logger;
    private Boolean debug;

    public Logger(String name) {
        if (name == null || name.isEmpty()) {
            throw new IllegalArgumentException("Logger name cannot be null or empty");
        }
        this.logger = LoggerFactory.getLogger(name);
        this.debug = false;
    }

    public Logger() {
        this("Logger");
    }

    public void info(String message, Object... args) {
        log("INFO", message, false, args);
    }

    public void warn(String message, Object... args) {
        log("WARN", message, debug, args);
    }

    public void error(String message, Object... args) {
        log("ERROR", message, debug, args);
    }

    public void debug(String message, Object... args) {
        if (debug) {
            log("DEBUG", message, true, args);
        }
    }

    private void log(String level, String message, boolean extended, Object... args) {
        String formattedMessage = getString(message, extended);

        switch (level) {
            case "INFO":
                logger.info(formattedMessage, args);
                break;
            case "WARN":
                logger.warn(formattedMessage, args);
                break;
            case "ERROR":
                logger.error(formattedMessage, args);
                break;
            default:
                logger.info(formattedMessage, args); // Fallback
                break;
        }
    }

    private static String getString(String message, boolean extended) {
        String formattedMessage;
        if (extended) {
            StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
            StackTraceElement caller = stackTrace[4];
            String className = caller.getClassName();
            String methodName = caller.getMethodName();

            formattedMessage = String.format(
                    "(%s#%s): %s",
                    className,
                    methodName,
                    message);

        } else {
            formattedMessage = message;
        }
        return formattedMessage;
    }

    public void setDebug(Boolean debug) {
        this.debug = debug;
    }

    public Boolean getDebug() {
        return debug;
    }
}
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/command/CommandExecutor.java">
package dev.objz.commandbridge.paper.command;

import java.util.Optional;
import java.util.UUID;

import org.bukkit.Bukkit;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

import dev.objz.commandbridge.paper.Main;
import dev.objz.commandbridge.paper.core.Runtime;
import dev.objz.commandbridge.paper.utils.CommandUtils;
import dev.objz.commandbridge.paper.utils.SchedulerAdapter;
import dev.objz.commandbridge.core.json.MessageParser;
import dev.objz.commandbridge.core.Logger;

public class CommandExecutor {
    private final Main plugin;
    private final Logger logger;

    public CommandExecutor() {
        this.plugin = Main.getInstance();
        this.logger = Runtime.getInstance().getLogger();
    }

    public void dispatchCommand(String message) {
        MessageParser parser = new MessageParser(message);
        String serverId = Runtime.getInstance().getConfig().getKey("config.yml", "client-id");
        if (!parser.getBodyValueAsString("client").equals(serverId)) {
            logger.debug("Message not intended for this client: {}", serverId);
            return;
        }
        String command = parser.getBodyValueAsString("command");
        String target = parser.getBodyValueAsString("target");
        logger.info("Dispatching command '{}' for executor: {}", command, target);

        switch (target) {
            case "console" -> executeConsoleCommand(command);
            case "player" -> executePlayerCommand(parser, command);
            default -> logger.warn("Invalid target: {}", target);
        }
    }

    private void executeConsoleCommand(String command) {
        logger.debug("Executing command '{}' as console", command);

        if (CommandUtils.isCommandValid(command)) {
            logger.warn("Invalid command: {}", command);
            Runtime.getInstance().getClient().sendError("Invalid command: " + command);
            return;
        }

        CommandSender console = Bukkit.getConsoleSender();
        new SchedulerAdapter(plugin).run(() -> {
            boolean status = Bukkit.dispatchCommand(console, command);
            logResult("console", command, status);
        });
    }

    private void executePlayerCommand(MessageParser parser, String command) {
        logger.debug("Executing command '{}' as player", command);
        String uuidStr = parser.getBodyValueAsString("uuid");
        String name = parser.getBodyValueAsString("name");

        try {
            UUID uuid = UUID.fromString(uuidStr);
            Optional<Player> playerOptional = Optional.ofNullable(Bukkit.getPlayer(uuid));

            playerOptional.ifPresentOrElse(player -> handlePlayerCommand(player, command),
                    () -> logger.warn("Player '{}' not found or offline", name));
        } catch (Exception e) {
            logger.error("Error while processing player: {}",
                    logger.getDebug() ? e : e.getMessage());
            Runtime.getInstance().getClient().sendError("Error while processing player: " + e.getMessage());
        }
    }

    private void handlePlayerCommand(Player player, String command) {
        if (CommandUtils.isCommandValid(command)) {
            logger.warn("Invalid command: {}", command);
            Runtime.getInstance().getClient().sendError("Invalid command: " + command);
            player.sendMessage("§cThe command '" + command + "' is invalid");
            return;
        }

        new SchedulerAdapter(plugin).run(() -> {
            boolean status = Bukkit.dispatchCommand(player, command);
            logResult("player", command, status);
        });
    }

    // private boolean isCommandValid(String command) {
    // String baseCommand = command.split(" ")[0];
    // PluginCommand pluginCommand = Bukkit.getPluginCommand(baseCommand);
    // if (pluginCommand != null) {
    // return false;
    // }
    // return Bukkit.getServer().getCommandMap().getCommand(baseCommand) == null;
    // }
    //
    private void logResult(String target, String command, boolean status) {
        if (status) {
            logger.info("Successfully executed command '{}' as {}", command, target);
        } else {
            logger.warn("Failed to execute command '{}' as {}", command, target);
            Runtime.getInstance().getClient().sendError("Failed to execute command '" + command + "' as " + target);
        }
    }

}
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/command/CommandForwarder.java">
package dev.objz.commandbridge.paper.command;

import java.util.HashSet;
import java.util.Set;

import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

import dev.objz.commandbridge.paper.Main;
import dev.objz.commandbridge.paper.core.Runtime;
import dev.objz.commandbridge.paper.utils.SchedulerAdapter;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.ScriptManager;
import dev.objz.commandbridge.core.utils.StringParser;
import me.clip.placeholderapi.PlaceholderAPI;

public class CommandForwarder {
    private final Logger logger;
    private final Main plugin;

    public CommandForwarder(Logger logger, Main plugin) {
        this.logger = logger;
        this.plugin = plugin;
    }

    public int executeScriptCommands(CommandSender sender, ScriptManager.ScriptConfig script, String[] args) {
        if (isPermissionDenied(sender, script)) {
            return 0;
        }

        for (ScriptManager.Command cmd : script.getCommands()) {
            logger.debug("Processing command: {}", cmd.getCommand());

            switch (cmd.getTargetExecutor().toLowerCase()) {
                case "player" -> handlePlayerExecutor(cmd, sender, args);
                case "console" -> handleConsoleExecutor(cmd, args);
                default -> logger.warn("Unknown target executor for command: {}", cmd.getCommand());
            }
        }

        return 1;
    }

    private boolean isPermissionDenied(CommandSender sender, ScriptManager.ScriptConfig script) {
        if (!script.shouldIgnorePermissionCheck()
                && !sender.hasPermission("commandbridge.command." + script.getName())) {
            logger.warn("Sender '{}' has no permission to use this command", sender);
            if (!script.shouldHidePermissionWarning()) {
                sender.sendMessage(ChatColor.RED + "You do not have permission to use this command.");
            }
            return true;
        }
        return false;
    }

    private void handlePlayerExecutor(ScriptManager.Command cmd, CommandSender sender, String[] args) {
        if (cmd.isCheckIfExecutorIsPlayer() && !(sender instanceof Player)) {
            logger.warn("This command requires a player as executor, but sender is not a player.");
            sender.sendMessage(
                    ChatColor.RED + "This command requires a player as executor, but source is not a player object");
            return;
        }

        Player player = (Player) sender;
        String parsedCommand = parseCommand(cmd, args, player);

        if (parsedCommand == null)
            return;

        if (cmd.getDelay() > 0) {
            scheduleCommand(cmd, parsedCommand, player);
        } else {
            sendCommand(cmd, parsedCommand, player);
        }
    }

    private void handleConsoleExecutor(ScriptManager.Command cmd, String[] args) {
        String parsedCommand = parseCommand(cmd, args, null);

        if (parsedCommand == null)
            return;

        if (cmd.getDelay() > 0) {
            scheduleCommand(cmd, parsedCommand, null);
        } else {
            sendCommand(cmd, parsedCommand, null);
        }
    }

    private String parseCommand(ScriptManager.Command cmd, String[] args, Player player) {
        StringParser parser = StringParser.create();

        if (player != null && cmd.getTargetExecutor().equals("player")) {
            addPlayerPlaceholders(parser, player);
        }

        try {
            StringParser.Result result = parser.validate(cmd.getCommand(), args);

            if (!result.isValid()) {
                Set<String> unresolved = result.getUnresolved();

                if (player == null && cmd.getTargetExecutor().equals("console")) {
                    Set<String> playerPlaceholders = new HashSet<>();
                    for (String placeholder : unresolved) {
                        if (isPlayerPlaceholder(placeholder)) {
                            playerPlaceholders.add(placeholder);
                        }
                    }

                    if (!playerPlaceholders.isEmpty()) {
                        logger.error("Console command '{}' contains player placeholders: {}",
                                cmd.getCommand(), playerPlaceholders);

                        Runtime.getInstance().getClient().sendError(
                                "Console command contains unresolvable player placeholders: " + playerPlaceholders);
                        return null;
                    }
                }

                if (!unresolved.isEmpty()) {
                    logger.warn("Command '{}' contains unresolved placeholders: {}", cmd.getCommand(), unresolved);
                }
            }

            String parsedCommand = result.getParsed();

            if (Runtime.getInstance().getStartup().isPlaceholderAPI() && player != null) {
                parsedCommand = PlaceholderAPI.setPlaceholders(player, parsedCommand);
            }

            return parsedCommand;

        } catch (Exception e) {
            logger.error("Error occurred while parsing command: {}", logger.getDebug() ? e : e.getMessage());
            if (player != null) {
                player.sendMessage(ChatColor.RED + "Error occurred while parsing command");
            }
            Runtime.getInstance().getClient().sendError("Error occurred while parsing commands");
            return null;
        }
    }

    private boolean isPlayerPlaceholder(String placeholder) {
        return placeholder.equals("%cb_player%") ||
                placeholder.equals("%cb_uuid%") ||
                placeholder.equals("%cb_world%");
    }

    private void addPlayerPlaceholders(StringParser parser, Player player) {
        logger.debug("Adding placeholders for player: {}", player.getName());
        parser.add("%cb_player%", player.getName());
        parser.add("%cb_uuid%", player.getUniqueId().toString());
        parser.add("%cb_world%", player.getWorld().getName());
    }

    private void scheduleCommand(ScriptManager.Command cmd, String command, Player player) {
        logger.debug("Scheduling command '{}' with delay: {} seconds", cmd.getCommand(), cmd.getDelay());
        if (player != null) {
            player.sendMessage("Scheduling command with '" + cmd.getDelay() + "' seconds");
        }
        new SchedulerAdapter(plugin).runLater(() -> sendCommand(cmd, command, player), cmd.getDelay() * 20L);
    }

    private void sendCommand(ScriptManager.Command cmd, String command, Player player) {
        logger.info("Sending command to server as {}", player == null ? "console" : "player");
        Runtime.getInstance().getClient().sendCommand(command, "", cmd.getTargetExecutor(), player);
    }
}
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/core/Runtime.java">
package dev.objz.commandbridge.paper.core;

import dev.objz.commandbridge.paper.Main;
import dev.objz.commandbridge.paper.command.CommandRegistrar;
import dev.objz.commandbridge.paper.utils.Encoder;
import dev.objz.commandbridge.paper.utils.GeneralUtils;
import dev.objz.commandbridge.paper.utils.ScriptUtils;
import dev.objz.commandbridge.paper.websocket.Client;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.ConfigManager;
import dev.objz.commandbridge.paper.command.CommandExecutor;
import dev.objz.commandbridge.paper.command.CommandForwarder;

public class Runtime {
    private static Runtime instance;
    private Logger logger;
    private ConfigManager config;
    private ScriptUtils scriptUtils;
    private Client client;
    private Startup startup;
    private CommandForwarder forwarder;
    private CommandRegistrar registrar;
    private GeneralUtils generalUtils;
    private CommandExecutor commandExecutor;
    private Encoder encoder;

    private Runtime() {
    }

    public static synchronized Runtime getInstance() {
        if (instance == null) {
            instance = new Runtime();
            instance.getLogger().debug("Runtime singleton instance initialized.");
        }
        return instance;
    }

    public synchronized Logger getLogger() {
        if (logger == null) {
            logger = new Logger("CommandBridge");
            logger.debug("Logger initialized.");
        }
        return logger;
    }

    public synchronized ConfigManager getConfig() {
        if (config == null) {
            config = new ConfigManager(getLogger(), "CommandBridge");
            getLogger().debug("ConfigManager initialized.");
        }
        return config;
    }

    public synchronized ScriptUtils getScriptUtils() {
        if (scriptUtils == null) {
            scriptUtils = new ScriptUtils(getLogger(), "CommandBridge");
            getLogger().debug("ScriptUtils initialized.");
        }
        return scriptUtils;
    }

    public synchronized Client getClient() {
        if (client == null) {
            client = new Client(getLogger(), getConfig().getKey("config.yml", "secret"));
            getLogger().debug("Server initialized.");
        }
        return client;
    }

    public synchronized Startup getStartup() {
        if (startup == null) {
            startup = new Startup(getLogger());
            getLogger().debug("Startup initialized.");
        }
        return startup;
    }

    public synchronized CommandForwarder getForwarder() {
        if (forwarder == null) {
            forwarder = new CommandForwarder(getLogger(), Main.getInstance());
            getLogger().debug("CommandHelper initialized.");
        }
        return forwarder;
    }

    public synchronized CommandRegistrar getRegistrar() {
        if (registrar == null) {
            registrar = new CommandRegistrar(getLogger());
            getLogger().debug("CommandRegistrar initialized.");
        }
        return registrar;
    }

    public synchronized GeneralUtils getGeneralUtils() {
        if (generalUtils == null) {
            generalUtils = new GeneralUtils(getLogger());
            getLogger().debug("GeneralUtils initialized.");
        }
        return generalUtils;
    }

    public synchronized CommandExecutor getCommandExecutor() {
        if (commandExecutor == null) {
            commandExecutor = new CommandExecutor();
            getLogger().debug("CommandExecutor initialized.");
        }
        return commandExecutor;
    }
    public synchronized Encoder getEncoder() {
        if (encoder == null) {
            encoder = new Encoder();
            getLogger().debug("Encoder initialized.");
        }
        return encoder;
    }
}
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/core/Startup.java">
package dev.objz.commandbridge.paper.core;

import org.bukkit.Bukkit;

import dev.objz.commandbridge.paper.Main;
import dev.objz.commandbridge.paper.utils.SchedulerAdapter;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.VersionChecker;

public class Startup {
    private final Logger logger;
    private final Runtime runtime;
    private boolean placeholderAPI = false;

    public Startup(Logger logger) {
        this.logger = logger;
        this.runtime = Runtime.getInstance();
    }

    public void start() {
        try {
            runtime.getConfig().copyConfig("bukkit-config.yml", "config.yml");
            runtime.getConfig().loadAllConfigs();

            boolean debugMode = Boolean.parseBoolean(runtime.getConfig().getKey("config.yml", "debug"));
            logger.setDebug(debugMode);
            if (SchedulerAdapter.isFolia()) {
                logger.info("Running on Folia!");
            }
            logger.info("Debug mode set to: {}", debugMode);

            logger.debug("Copying default scripts...");
            runtime.getScriptUtils().copyDefaultScript("bukkit-example.yml", "example.yml");
            runtime.getScriptUtils().loadAllScripts();

            logger.debug("Connecting to WebSocket server...");
            runtime.getClient().connect(
                    runtime.getConfig().getKey("config.yml", "remote"),
                    Integer.parseInt(runtime.getConfig().getKey("config.yml", "port")));

            logger.debug("Setting up version checker...");
            VersionChecker.setProjectId("wIuI4ru2");

            logger.debug("Checking for updates...");
            checkForUpdates();

            logger.debug("Registering internal commands...");
            runtime.getGeneralUtils().registerCommands();

            if (Bukkit.getPluginManager().isPluginEnabled("PlaceholderAPI")) {
                logger.info("Hooked into PlaceholderAPI — external placeholders enabled");
                placeholderAPI = true;
            } else {
                logger.warn("PlaceholderAPI not found — using internal placeholder system only");
                placeholderAPI = false;
            }
        } catch (Exception e) {
            logger.error("Failed to initialize CommandBridge: {}",
                    logger.getDebug() ? e : e.getMessage());
        }
    }

    public boolean isPlaceholderAPI() {
        return placeholderAPI;
    }

    public void stop() {
        try {
            logger.debug("Disconnecting from WebSocket server...");
            runtime.getClient().disconnect();
        } catch (Exception e) {
            logger.error("Failed to stop CommandBridge: {}",
                    logger.getDebug() ? e : e.getMessage());
        }
    }

    private void checkForUpdates() {
        String currentVersion = Main.getVersion();
        logger.debug("Current version: {}", currentVersion);
        new Thread(() -> {
            try {
                String latestVersion = VersionChecker.getLatestVersion();
                if (latestVersion == null) {
                    logger.warn("Unable to check for updates");
                    return;
                }
                if (VersionChecker.isNewerVersion(latestVersion, currentVersion)) {
                    logger.warn("A new version is available: {}", latestVersion);
                    logger.warn("Please download the latest release: {}", VersionChecker.getDownloadUrl());
                    runtime.getClient().sendError("Please update CommandBridge");
                } else {
                    logger.info("You are running the latest version: {}", currentVersion);
                }
            } catch (Exception e) {
                logger.error("Error while checking for updates: {}",
                        logger.getDebug() ? e : e.getMessage());
            }
        }).start();
    }
}
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/utils/CommandUtils.java">
package dev.objz.commandbridge.paper.utils;

import java.lang.reflect.Field;

import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandMap;
import org.bukkit.command.PluginCommand;

import dev.objz.commandbridge.paper.core.Runtime;

public class CommandUtils {
    private static CommandMap getCommandMap() {
        try {
            Field commandMapField = Bukkit.getServer().getClass().getDeclaredField("commandMap");
            commandMapField.setAccessible(true);
            return (CommandMap) commandMapField.get(Bukkit.getServer());
        } catch (Exception e) {
            Runtime.getInstance().getLogger().error("Error while accessing commandMap: {}", e);
            return null;
        }
    }

    public static boolean isCommandValid(String command) {
        String baseCommand = command.split(" ")[0];
        PluginCommand pluginCommand = Bukkit.getPluginCommand(baseCommand);
        if (pluginCommand != null) {
            return false;
        }

        CommandMap commandMap = getCommandMap();
        if (commandMap == null) {
            return false;
        }

        Command cmd = commandMap.getCommand(baseCommand);
        return cmd == null;
    }


}
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/utils/GeneralUtils.java">
package dev.objz.commandbridge.paper.utils;

import java.util.ArrayList;
import java.util.List;

import org.bukkit.ChatColor;

import dev.objz.commandbridge.paper.Main;
import dev.objz.commandbridge.core.Logger;
import dev.jorel.commandapi.CommandAPICommand;
import dev.jorel.commandapi.arguments.Argument;
import dev.jorel.commandapi.arguments.ArgumentSuggestions;
import dev.jorel.commandapi.arguments.StringArgument;
import dev.objz.commandbridge.paper.core.Runtime;

public class GeneralUtils {
    private final Logger logger;

    public GeneralUtils(Logger logger) {
        this.logger = logger;
    }

    public void reloadAll() {
        new SchedulerAdapter(Main.getInstance())
                .run(
                        () -> {
                            logger.debug("Running on thread (reload): {}", Thread.currentThread().getName());
                            try {
                                Runtime.getInstance().getConfig().reload();
                                logger.debug("All configs have been reloaded");
                                logger.setDebug(Boolean
                                        .parseBoolean(Runtime.getInstance().getConfig().getKey("config.yml", "debug")));
                                logger.info("Debug mode set to: {}",
                                        Runtime.getInstance().getConfig().getKey("config.yml", "debug"));
                                Runtime.getInstance().getScriptUtils().reload();
                                logger.debug("All scripts have been reloaded");
                                logger.info("Everything Reloaded!");
                                Runtime.getInstance().getClient().sendTask("reload", "success");
                            } catch (Exception e) {
                                logger.error("Error occurred while reloading: {}",
                                        logger.getDebug() ? e : e.getMessage());
                                Runtime.getInstance().getClient().sendTask("reload", "failure");
                            }
                        });
    }

    public void registerCommands() {
        List<Argument<?>> arguments = new ArrayList<>();
        arguments.add(new StringArgument("arguments").replaceSuggestions(ArgumentSuggestions.strings("reconnect")));
        new CommandAPICommand("commandbridgeclient")
                .withArguments(arguments)
                .withAliases("cbc")
                .withPermission("commandbridge.admin")
                .executes((sender, args) -> {
                    String opt = (String) args.get("arguments");
                    if (opt.matches("reconnect")) {
                        Runtime.getInstance().getClient().disconnect();
                        try {
                            Runtime.getInstance().getClient().connect(
                                    Runtime.getInstance().getConfig().getKey("config.yml", "remote"),
                                    Integer.parseInt(Runtime.getInstance().getConfig().getKey("config.yml", "port")));
                        } catch (Exception e) {
                            logger.error("Client reconnection failed: ", e);
                            sender.sendMessage(ChatColor.RED + "Failed to reconnect");
                        }
                        sender.sendMessage(ChatColor.GREEN + "Client reconnected successfully");
                    }
                })
                .register();
    }

}
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/utils/SchedulerAdapter.java">
package dev.objz.commandbridge.paper.utils;

import java.util.function.Consumer;

import org.bukkit.Bukkit;
import org.bukkit.plugin.java.JavaPlugin;
import org.jetbrains.annotations.NotNull;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;

public class SchedulerAdapter {
    private final JavaPlugin plugin;

    public SchedulerAdapter(JavaPlugin plugin) {
        this.plugin = plugin;
    }

    public void run(Runnable task) {
        if (isFolia()) {
            Bukkit.getGlobalRegionScheduler().execute(plugin, task);
        } else {
            Bukkit.getScheduler().runTask(plugin, task);
        }
    }

    public void runLater(Runnable task, long delayTicks) {
        if (isFolia()) {
            Bukkit.getGlobalRegionScheduler().runDelayed(plugin, (@NotNull Consumer<ScheduledTask>) task, delayTicks);
        } else {
            Bukkit.getScheduler().runTaskLater(plugin, task, delayTicks);
        }
    }

    public static boolean isFolia() {
        try {
            Class.forName("io.papermc.paper.threadedregions.RegionizedServer");
            return true;
        } catch (ClassNotFoundException e) {
            return false;
        }
    }
}
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/utils/ScriptUtils.java">
package dev.objz.commandbridge.paper.utils;

import dev.objz.commandbridge.paper.Main;
import dev.objz.commandbridge.paper.command.CommandRegistrar;
import dev.objz.commandbridge.paper.core.Runtime;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.ScriptManager;

public class ScriptUtils extends ScriptManager {
    private final Logger logger;
    private final CommandRegistrar registrar;

    public ScriptUtils(Logger logger, String pluginName) {
        super(logger, pluginName);
        this.logger = logger;
        this.registrar = Runtime.getInstance().getRegistrar();
    }

    @Override
    public void onFileProcessed(String fileName, ScriptConfig scriptConfig) {
        if (scriptConfig.isEnabled()) {
            logger.info("Loaded script: {}", fileName);
            try {
                registrar.registerCommand(getScriptConfig(fileName));
                Runtime.getInstance().getEncoder().addScriptConfig(scriptConfig);
                logger.debug("Registered command: {}", scriptConfig.getName());
            } catch (Exception e) {
                logger.error("Failed to register script '{}' : {}",
                        scriptConfig.getName(),
                        logger.getDebug() ? e : e.getMessage());
            }
        } else {
            logger.info("Skipped disabled script: {}", scriptConfig.getName());
        }
    }

    public void unloadCommands(Runnable callback) {
        new SchedulerAdapter(Main.getInstance())
                .run(
                        () -> {
                            logger.debug("Running on thread (unload): {}", Thread.currentThread().getName());
                            Runtime.getInstance().getRegistrar().unregisterAllCommands();
                            logger.debug("All commands have been unloaded");
                            callback.run();
                        });
    }

}
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/websocket/Client.java">
package dev.objz.commandbridge.paper.websocket;

import dev.objz.commandbridge.paper.Main;
import dev.objz.commandbridge.paper.core.Runtime;
import dev.objz.commandbridge.paper.utils.SchedulerAdapter;
import dev.objz.commandbridge.core.json.MessageBuilder;
import dev.objz.commandbridge.core.json.MessageParser;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.websocket.WebSocketClient;
import org.bukkit.entity.Player;

public class Client extends WebSocketClient {
    private final Logger logger;

    public Client(Logger logger, String secret) {
        super(logger, secret);
        this.logger = logger;
    }

    @Override
    protected void onMessage(String message) {
        MessageParser parser = new MessageParser(message);
        logger.debug("Received payload: {}", message);
        try {
            String type = parser.getType();
            switch (type) {
                case "command" -> handleCommandRequest(message);
                case "system" -> handleSystemRequest(message);
                default -> {
                    logger.warn("Invalid type: {}", type);
                    sendError("Invalid type: " + type);
                }
            }
        } catch (Exception e) {
            logger.error("Error while processing message: {}",
                    logger.getDebug() ? e : e.getMessage());
            sendError("Internal client error: " + e.getMessage());
        }
    }

    @Override
    protected void afterAuth() {
        logger.debug("Sending server information's...");
        MessageBuilder builder = new MessageBuilder("system");
        builder.addToBody("channel", "name");
        builder.addToBody("name", Runtime.getInstance().getConfig().getKey("config.yml", "client-id"));
        logger.debug("Sending payload: {}", builder.build().toString());
        sendMessage(builder.build());
    }

    private void handleCommandRequest(String message) {
        logger.debug("Handling command response");
        Runtime.getInstance().getCommandExecutor().dispatchCommand(message);
    }

    private void handleSystemRequest(String message) {
        logger.debug("Handling system request");
        MessageParser parser = new MessageParser(message);
        String channel = parser.getBodyValueAsString("channel");
        String status = parser.getStatus();

        switch (channel) {
            case "error" -> logger.warn("Message from server '{}' : {}", parser.getBodyValueAsString("server"), status);
            case "info" -> logger.info("Message from server '{}' : {}", parser.getBodyValueAsString("server"), status);
            case "task" -> systemTask(parser, status);
            default -> logger.warn("Invalid channel: {}", channel);
        }
    }

    private void systemTask(MessageParser parser, String status) {
        String task = parser.getBodyValueAsString("task");
        switch (task) {
            case "reload" ->
                Runtime.getInstance().getScriptUtils().unloadCommands(() -> new SchedulerAdapter(Main.getInstance())
                        .runLater(Runtime.getInstance().getGeneralUtils()::reloadAll, 10L));
            case "reconnect" -> Ping.reconnect(logger);
            case "dump" -> {
                String encoded = Runtime.getInstance().getEncoder().encode();
                String compressed;
                try {
                    compressed = Runtime.getInstance().getEncoder().compress(encoded);
                } catch (Exception e) {
                    logger.error("Failed to compress the dump data: {}", logger.getDebug() ? e : e.getMessage());
                    sendError("Error while processing dump data: " + e.getMessage());
                    return;
                }
                MessageBuilder builder = new MessageBuilder("system");
                builder.addToBody("channel", "task").addToBody("task", "dump")
                        .addToBody("client", Runtime.getInstance().getConfig().getKey("config.yml", "client-id"))
                        .addToBody("compressed", compressed)
                        .withStatus("success");
                sendMessage(builder.build());
            }
            default -> logger.warn("Invalid task: {}", task);
        }
    }

    public void sendError(String errorMessage) {
        MessageBuilder builder = new MessageBuilder("system");
        builder.addToBody("channel", "error").withStatus(errorMessage).addToBody("client",
                Runtime.getInstance().getConfig().getKey("config.yml", "client-id"));
        sendMessage(builder.build());
    }

    public void sendInfo(String infoMessage) {
        MessageBuilder builder = new MessageBuilder("system");
        builder.addToBody("channel", "info").withStatus(infoMessage).addToBody("client",
                Runtime.getInstance().getConfig().getKey("config.yml", "client-id"));
        sendMessage(builder.build());
    }

    public void sendTask(String task, String status) {
        MessageBuilder builder = new MessageBuilder("system");
        builder.addToBody("channel", "task").addToBody("task", task)
                .addToBody("client", Runtime.getInstance().getConfig().getKey("config.yml", "client-id"))
                .withStatus(status);
        sendMessage(builder.build());
    }

    public void sendCommand(String command, String client, String target, Player executor) {
        MessageBuilder builder = new MessageBuilder("command");
        builder.addToBody("command", command).addToBody("client", client).addToBody("target", target);

        if (target.equals("player")) {
            builder.addToBody("name", executor.getName()).addToBody("uuid", executor.getUniqueId());
        }
        logger.info("Sending command '{}' to server", command);
        logger.debug("Sending payload: {}", builder.build().toString());
        sendMessage(builder.build());
    }
}
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/websocket/Ping.java">
package dev.objz.commandbridge.paper.websocket;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.Timer;
import java.util.TimerTask;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import dev.objz.commandbridge.paper.core.Runtime;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.ConfigManager;

public class Ping {
    private static void startPing(Logger logger, Runnable onPong, String url, int port, int maxAttempts) {
        final int millis = 4000;

        Timer timer = new Timer();

        disableCertificateValidation();

        timer.scheduleAtFixedRate(new TimerTask() {
            int attempts = 0;

            @Override
            public void run() {
                attempts++;
                if (attempts > maxAttempts) {
                    logger.warn("Max reconnect attempts reached. Reconnect manual by running '/cbc reconnect'");
                    timer.cancel();
                    return;
                }

                try {
                    URL targetUrl = new URL("https://" + url + ":" + port + "/ping");
                    HttpsURLConnection conn = (HttpsURLConnection) targetUrl.openConnection();
                    conn.setRequestMethod("GET");
                    conn.setConnectTimeout(1500);
                    conn.setReadTimeout(1500);

                    logger.debug("Pinging WebsocketServer");

                    int responseCode = conn.getResponseCode();
                    if (responseCode == 200) {
                        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                        String response = in.readLine();
                        in.close();

                        if ("pong".equalsIgnoreCase(response)) {
                            logger.info("Attempting to reconnect to the server!");
                            onPong.run();
                            timer.cancel();
                        }
                    }
                } catch (Exception e) {
                    // logger.error("Ping error: {}", e);
                }
            }
        }, 0, millis);
    }

    public static void reconnect(Logger logger) {
        ConfigManager config = Runtime.getInstance().getConfig();
        int attempts;
        try {
            attempts = Integer.parseInt(config.getKey("config.yml", "timeout")) / 4;
        } catch (RuntimeException e) {
            attempts = 120 / 4;
        }

        startPing(logger, () -> {
            Runtime.getInstance().getClient().disconnect();

            String host = config.getKey("config.yml", "remote");
            int port = Integer.parseInt(config.getKey("config.yml", "port"));

            try {
                Runtime.getInstance().getClient().connect(host, port);
                logger.info("Client reconnected successfully to {}:{}", host, port);
            } catch (Exception e) {
                logger.error("Client reconnection failed (but ping succeeded):", e);
            }

        }, config.getKey("config.yml", "remote"),
                Integer.parseInt(config.getKey("config.yml", "port")),
                attempts);
    }

    private static void disableCertificateValidation() {
        try {
            TrustManager[] trustAllCerts = new TrustManager[] {
                    new X509TrustManager() {
                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                            return new java.security.cert.X509Certificate[0];
                        }

                        public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                        }

                        public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                        }
                    }
            };

            SSLContext sc = SSLContext.getInstance("TLS");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> true);
        } catch (Exception e) {
            throw new RuntimeException("Failed to disable certificate validation", e);
        }
    }
}
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/Main.java">
package dev.objz.commandbridge.paper;

import java.io.InputStream;
import java.util.Properties;

import org.bukkit.Bukkit;
import org.bukkit.plugin.java.JavaPlugin;

import dev.objz.commandbridge.paper.core.Runtime;
import dev.objz.commandbridge.core.Logger;
import dev.jorel.commandapi.CommandAPI;
import dev.jorel.commandapi.CommandAPIBukkitConfig;

public class Main extends JavaPlugin {
    private static Main instance;
    private final Logger logger;

    public Main() {
        instance = this;
        logger = Runtime.getInstance().getLogger();
    }

    public static String getVersion() {
        try (InputStream input = Main.class.getClassLoader().getResourceAsStream("plugin.properties")) {
            if (input == null) {
                return "Unknown";
            }
            Properties properties = new Properties();
            properties.load(input);
            return properties.getProperty("plugin.version", "Unknown");
        } catch (Exception e) {
            e.printStackTrace();
            return "Unknown";
        }
    }

    public static Main getInstance() {
        return instance;
    }

    @Override
    public void onLoad() {
        CommandAPI.onLoad(new CommandAPIBukkitConfig(this).verboseOutput(false).silentLogs(true)
                .skipReloadDatapacks(true).shouldHookPaperReload(false));
    }

    @Override
    public void onEnable() {
        CommandAPI.onEnable();
        logger.info("Initializing CommandBridge...");
        Runtime.getInstance().getStartup().start();
    }

    @Override
    public void onDisable() {
        CommandAPI.onDisable();
        logger.info("Stopping CommandBridge...");
        Runtime.getInstance().getStartup().stop();
    }

    public record ServerInfo(String name, String version) {
    }

    public static ServerInfo detectServer() {
        Package pkg = Bukkit.getServer().getClass().getPackage();
        String title = pkg.getImplementationTitle();
        String version = pkg.getImplementationVersion();

        if (title != null && !title.isBlank()
                && version != null && !version.isBlank()) {
            return new ServerInfo(title, version);
        }

        String fallbackName = Bukkit.getServer().getName();
        String fallbackVersion = Bukkit.getServer().getVersion();
        return new ServerInfo(fallbackName, fallbackVersion);
    }

}
</file>

<file path="paper/src/main/resources/bukkit-config.yml">
# Client Configuration File

# General debug mode.
# Set to true to enable detailed logs and diagnostics for troubleshooting,
# or false for standard logging.
debug: false

# Unique identifier for the client.
# This is used to distinguish this client from others in the network.
# Example: client-id: "lobby" for a lobby client.
client-id: "lobby"

# The address of the remote server this client will connect to.
# Use "127.0.0.1" for local connections or the server's IP for remote access.
# Example: remote: "192.168.1.100" for a server on the local network.
remote: "127.0.0.1"

# The port number the client will use to connect to the remote server.
# Ensure this matches the port configured on the server side.
port: 8080

# Time in seconds to keep trying to reconnect after server shutdown.
# After this, use /cbc reconnect to retry manually.
timeout: 120

# A shared secret key used for authentication between the client and the server.
# This ensures secure communication.
# The key is stored securely in the secret.key file located in the server's plugin folder.
secret: "CHANGE_ME"
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/command/CommandDispatcher.java">
package dev.objz.commandbridge.velocity.command;

import java.util.Optional;
import java.util.UUID;

import com.velocitypowered.api.proxy.Player;
import com.velocitypowered.api.proxy.ProxyServer;

import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.velocity.util.ProxyUtils;
import dev.objz.commandbridge.core.json.MessageParser;
import dev.objz.commandbridge.core.Logger;

public class CommandDispatcher {
    private final ProxyServer proxy;
    private final Logger logger;

    public CommandDispatcher() {
        this.proxy = ProxyUtils.getProxyServer();
        this.logger = Runtime.getInstance().getLogger();
    }

    public void dispatchCommand(String message) {
        MessageParser parser = new MessageParser(message);
        String command = parser.getBodyValueAsString("command");
        String target = parser.getBodyValueAsString("target");
        logger.info("Dispatching command: '{}' for target: {}", command, target);

        switch (target.toLowerCase()) {
            case "console" -> executeConsoleCommand(command);
            case "player" -> executePlayerCommand(parser, command);
            default -> logger.warn("Invalid target: {}", target);
        }
    }

    private void executeConsoleCommand(String command) {
        logger.debug("Executing command '{}' as console", command);
        proxy.getCommandManager()
                .executeAsync(proxy.getConsoleCommandSource(), command)
                .whenComplete((result, throwable) -> {
                    if (throwable != null) {
                        logger.error("Error executing console command: {}", throwable);
                    }
                });
    }

    private void executePlayerCommand(MessageParser parser, String command) {
        logger.debug("Executing command '{}' as player", command);
        String uuidStr = parser.getBodyValueAsString("uuid");
        String name = parser.getBodyValueAsString("name");

        try {
            UUID playerUuid = UUID.fromString(uuidStr);
            Optional<Player> playerOptional = proxy.getPlayer(playerUuid);

            if (playerOptional.isPresent()) {
                Player player = playerOptional.get();
                proxy.getCommandManager()
                        .executeAsync(player, command)
                        .whenComplete((result, throwable) -> {
                            if (throwable != null) {
                                logger.error("Error executing console command: {}", throwable);
                            }
                        });
            } else {
                logger.warn("Player '{}' not found or offline", name);
            }
        } catch (Exception e) {
            logger.error("Error while processing player: {}",
                    logger.getDebug() ? e : e.getMessage());
        }
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/command/CommandForwarder.java">
package dev.objz.commandbridge.velocity.command;

import com.velocitypowered.api.command.CommandSource;
import com.velocitypowered.api.proxy.Player;
import com.velocitypowered.api.proxy.ProxyServer;
import dev.objz.commandbridge.velocity.Main;
import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.velocity.util.ProxyUtils;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.ScriptManager;
import dev.objz.commandbridge.core.utils.StringParser;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import net.william278.papiproxybridge.api.PlaceholderAPI;

public class CommandForwarder {
    private final Logger logger;
    private final ProxyServer proxy;
    private final Main plugin;

    public CommandForwarder(Logger logger, Main plugin) {
        this.logger = logger;
        this.proxy = ProxyUtils.getProxyServer();
        this.plugin = plugin;
    }

    public int executeScriptCommands(CommandSource source,
            ScriptManager.ScriptConfig script,
            String[] args) {
        logger.debug("Executing script commands for script: {}", script.getName());

        if (isPermissionDenied(source, script)) {
            return 0;
        }

        for (ScriptManager.Command cmd : script.getCommands()) {
            logger.debug("Processing command: {}", cmd.getCommand());

            switch (cmd.getTargetExecutor().toLowerCase()) {
                case "player" -> handlePlayerExecutor(cmd, source, args);
                case "console" -> handleConsoleExecutor(cmd, source, args);
                default ->
                    logger.warn("Unknown target executor for command: {}",
                            cmd.getCommand());
            }
        }

        logger.info("Script commands executed successfully for command: {}",
                script.getName());
        return com.mojang.brigadier.Command.SINGLE_SUCCESS;
    }

    private boolean isPermissionDenied(CommandSource source,
            ScriptManager.ScriptConfig script) {
        if (!script.shouldIgnorePermissionCheck() &&
                !source.hasPermission("commandbridge.command." + script.getName())) {
            logger.warn("Sender '{}' has no permission to use this command", source);
            if (!script.shouldHidePermissionWarning()) {
                source.sendMessage(
                        Component.text("You do not have permission to use this command",
                                NamedTextColor.RED));
            }
            return true;
        }
        return false;
    }

    private void handlePlayerExecutor(ScriptManager.Command cmd,
            CommandSource source, String[] args) {
        if (cmd.isCheckIfExecutorIsPlayer() && !(source instanceof Player)) {
            logger.warn("This command requires a player as executor, but source is " +
                    "not a player");
            source.sendMessage(
                    Component.text("This command requires a player as executor, but " +
                            "source is not a player object",
                            NamedTextColor.RED));
            return;
        }

        Player player = (Player) source;

        if (cmd.isCheckIfExecutorIsOnServer() &&
                !isPlayerOnTargetServer(player, cmd)) {
            logger.warn("Player '{}' is not on the required server for this command.",
                    player.getUsername());
            source.sendMessage(Component.text("Player " + player.getUsername() +
                    " is not on the required server",
                    NamedTextColor.YELLOW));
            return;
        }

        parseCommand(cmd, args, player).thenAccept(parsedCommand -> {
            if (parsedCommand == null)
                return;

            if (cmd.getDelay() > 0) {
                scheduleCommand(cmd, parsedCommand, args, player, 0);
            } else {
                sendCommand(cmd, parsedCommand, args, player, 0);
            }
        });
    }

    private void handleConsoleExecutor(ScriptManager.Command cmd,
            CommandSource source, String[] args) {

        parseCommand(cmd, args, null).thenAccept(parsedCommand -> {
            if (parsedCommand == null)
                return;

            if (cmd.getDelay() > 0) {
                scheduleCommand(cmd, parsedCommand, args, null, 0);
            } else {
                sendCommand(cmd, parsedCommand, args, null, 0);
            }
        });
    }

    private boolean isPlayerOnTargetServer(Player player,
            ScriptManager.Command cmd) {
        return player.getCurrentServer()
                .map(serverConn -> cmd.getTargetClientIds().contains(
                        serverConn.getServerInfo().getName()))
                .orElse(false);
    }

    private CompletableFuture<String> parseCommand(ScriptManager.Command cmd,
            String[] args, Player player) {
        StringParser parser = StringParser.create();

        if (player != null && cmd.getTargetExecutor().equals("player")) {
            addPlayerPlaceholders(parser, player);
        }

        try {
            StringParser.Result result = parser.validate(cmd.getCommand(), args);

            if (!result.isValid()) {
                Set<String> unresolved = result.getUnresolved();

                if (player == null && cmd.getTargetExecutor().equals("console")) {
                    Set<String> playerPlaceholders = new HashSet<>();
                    for (String placeholder : unresolved) {
                        if (isPlayerPlaceholder(placeholder)) {
                            playerPlaceholders.add(placeholder);
                        }
                    }

                    if (!playerPlaceholders.isEmpty()) {
                        logger.error(
                                "Console command '{}' contains player placeholders: {}",
                                cmd.getCommand(), playerPlaceholders);

                        for (String conn : cmd.getTargetClientIds()) {
                            Runtime.getInstance().getServer().sendError(
                                    Runtime.getInstance().getServer().getWebSocket(conn),
                                    "Console command contains unresolvable player " +
                                            "placeholders: " +
                                            playerPlaceholders);
                        }
                        return CompletableFuture.completedFuture(null);
                    }
                }

                if (!unresolved.isEmpty()) {
                    logger.warn("Command '{}' contains unresolved placeholders: {}",
                            cmd.getCommand(), unresolved);
                }
            }

            String parsedCommand = result.getParsed();

            if (Runtime.getInstance().getStartup().isPlaceholderAPI() &&
                    player != null) {
                return PlaceholderAPI.createInstance()
                        .formatPlaceholders(parsedCommand, player.getUniqueId())
                        .exceptionally(e -> {
                            logger.error("PlaceholderAPI error: {}",
                                    logger.getDebug() ? e : e.getMessage());
                            return parsedCommand;
                        });
            }

            return CompletableFuture.completedFuture(parsedCommand);
        } catch (Exception e) {
            logger.error("Error occurred while parsing command: {}",
                    logger.getDebug() ? e : e.getMessage());
            if (player != null) {
                player.sendMessage(
                        Component.text("Error occurred while parsing command")
                                .color(NamedTextColor.RED));
            }
            for (String conn : cmd.getTargetClientIds()) {
                Runtime.getInstance().getServer().sendError(
                        Runtime.getInstance().getServer().getWebSocket(conn),
                        "Error occurred while parsing commands");
            }

            return CompletableFuture.completedFuture(null);
        }
    }

    private boolean isPlayerPlaceholder(String placeholder) {
        return placeholder.equals("%cb_player%") ||
                placeholder.equals("%cb_uuid%") || placeholder.equals("%cb_server%");
    }

    private void addPlayerPlaceholders(StringParser parser, Player player) {
        logger.debug("Adding placeholders for player: {}", player.getUsername());
        parser.add("%cb_player%", player.getUsername());
        parser.add("%cb_uuid%", player.getUniqueId().toString());
        parser.add("%cb_server%", player.getCurrentServer()
                .map(srv -> srv.getServerInfo().getName())
                .orElse("defaultServerName"));
    }

    private void scheduleCommand(ScriptManager.Command cmd, String command,
            String[] args, Player player, int retryCount) {
        logger.debug("Scheduling command '{}' with delay: {} seconds",
                cmd.getCommand(), cmd.getDelay());
        proxy.getScheduler()
                .buildTask(plugin,
                        () -> sendCommand(cmd, command, args, player, retryCount))
                .delay(cmd.getDelay(), TimeUnit.SECONDS)
                .schedule();
    }

    private void sendCommand(ScriptManager.Command cmd, String command,
            String[] args, Player player, int retryCount) {
        logger.debug("Executing command: {} with retryCount: {}", cmd.getCommand(),
                retryCount);

        if (retryCount >= 30) {
            logger.warn("Max retries reached for command: {}", cmd.getCommand());
            if (player != null) {
                player.sendMessage(
                        Component.text("Max retries reached", NamedTextColor.YELLOW));
            }
            return;
        }

        if (cmd.shouldWaitUntilPlayerIsOnline() &&
                "player".equalsIgnoreCase(cmd.getTargetExecutor())) {
            if (player == null || !player.isActive()) {
                logger.warn("Player is not online. Retrying command: {}",
                        cmd.getCommand());
                if (player != null) {
                    player.sendMessage(Component.text(
                            "Player is not online. Retrying command", NamedTextColor.YELLOW));
                }
                proxy.getScheduler()
                        .buildTask(
                                plugin,
                                () -> sendCommand(cmd, command, args, player, retryCount + 1))
                        .delay(1, TimeUnit.SECONDS)
                        .schedule();
                return;
            }
        }

        List<String> targetClients = cmd.getTargetClientIds();
        if (targetClients.isEmpty()) {
            logger.warn("No target clients defined for command: {}",
                    cmd.getCommand());
            if (player != null) {
                player.sendMessage(
                        Component.text("No target clients are defined for this command",
                                NamedTextColor.RED));
            }
            return;
        }

        for (String clientId : targetClients) {
            if (Runtime.getInstance().getServer().isServerConnected(clientId)) {
                logger.info("Sending command to client '{}' as {}", clientId,
                        player == null ? "console" : "player");
                Runtime.getInstance().getServer().sendCommand(
                        command, clientId, cmd.getTargetExecutor(), player);
            } else {
                logger.warn("Client '{}' not found", clientId);
                if (player != null) {
                    player.sendMessage(Component.text(
                            "Client '" + clientId + "' not found", NamedTextColor.RED));
                }
            }
        }
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/core/Runtime.java">
package dev.objz.commandbridge.velocity.core;

import dev.objz.commandbridge.velocity.Main;
import dev.objz.commandbridge.velocity.command.CommandDispatcher;
import dev.objz.commandbridge.velocity.command.CommandForwarder;
import dev.objz.commandbridge.velocity.command.CommandRegistrar;
import dev.objz.commandbridge.velocity.util.Encoder;
import dev.objz.commandbridge.velocity.util.GeneralUtils;
import dev.objz.commandbridge.velocity.util.ScriptUtils;
import dev.objz.commandbridge.velocity.websocket.HttpServer;
import dev.objz.commandbridge.velocity.websocket.Server;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.ConfigManager;

public class Runtime {
    private static Runtime instance;
    private Logger logger;
    private ConfigManager config;
    private ScriptUtils scriptUtils;
    private Server server;
    private Startup startup;
    private CommandForwarder helper;
    private CommandRegistrar registrar;
    private GeneralUtils generalUtils;
    private CommandDispatcher commandDispatcher;
    private HttpServer httpServer;
    private Encoder encoder;

    private Runtime() {
    }

    public static synchronized Runtime getInstance() {
        if (instance == null) {
            instance = new Runtime();
            instance.getLogger().debug("Runtime singleton instance initialized.");
        }
        return instance;
    }

    public synchronized Logger getLogger() {
        if (logger == null) {
            logger = new Logger("CommandBridge");
            logger.debug("Logger initialized.");
        }
        return logger;
    }

    public synchronized ConfigManager getConfig() {
        if (config == null) {
            config = new ConfigManager(getLogger(), "CommandBridge");
            getLogger().debug("ConfigManager initialized.");
        }
        return config;
    }

    public synchronized ScriptUtils getScriptUtils() {
        if (scriptUtils == null) {
            scriptUtils = new ScriptUtils(getLogger(), "CommandBridge");
            getLogger().debug("ScriptUtils initialized.");
        }
        return scriptUtils;
    }

    public synchronized Server getServer() {
        if (server == null) {
            server = new Server(getLogger(), getConfig().getSecret());
            getLogger().debug("Server initialized.");
        }
        return server;
    }

    public synchronized Startup getStartup() {
        if (startup == null) {
            startup = new Startup(getLogger());
            getLogger().debug("Startup initialized.");
        }
        return startup;
    }

    public synchronized CommandForwarder getHelper() {
        if (helper == null) {
            helper = new CommandForwarder(getLogger(), Main.getInstance());
            getLogger().debug("CommandForwarder initialized.");
        }
        return helper;
    }

    public synchronized CommandRegistrar getRegistrar() {
        if (registrar == null) {
            registrar = new CommandRegistrar(getLogger());
            getLogger().debug("InternalRegistrar initialized.");
        }
        return registrar;
    }

    public synchronized GeneralUtils getGeneralUtils() {
        if (generalUtils == null) {
            generalUtils = new GeneralUtils(getLogger());
            getLogger().debug("GeneralUtils initialized.");
        }
        return generalUtils;
    }

    public synchronized CommandDispatcher getCommandExecutor() {
        if (commandDispatcher == null) {
            commandDispatcher = new CommandDispatcher();
            getLogger().debug("CommandDispatcher initialized.");
        }
        return commandDispatcher;
    }

    public synchronized HttpServer getHttpServer() {
        if (httpServer == null) {
            httpServer = new HttpServer(logger);
            getLogger().debug("HttpServer initialized.");
        }
        return httpServer;
    }

    public synchronized Encoder getEncoder() {
        if (encoder == null) {
            encoder = new Encoder();
            getLogger().debug("Encoder initialized.");
        }
        return encoder;
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/core/Startup.java">
package dev.objz.commandbridge.velocity.core;

import dev.objz.commandbridge.velocity.Main;
import dev.objz.commandbridge.velocity.websocket.Server;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.VersionChecker;

public class Startup {
    private final Logger logger;
    private final Runtime runtime;
    private boolean placeholderAPI = false;

    public Startup(Logger logger) {
        this.logger = logger;
        this.runtime = Runtime.getInstance();
    }

    public void start() {
        try {
            runtime.getConfig().copyConfig("velocity-config.yml", "config.yml");
            runtime.getConfig().loadAllConfigs();
            runtime.getConfig().loadSecret();

            boolean debugMode = Boolean.parseBoolean(runtime.getConfig().getKey("config.yml", "debug"));
            logger.setDebug(debugMode);
            logger.debug("Debug mode set to: {}", debugMode);

            logger.debug("Copying default scripts...");
            runtime.getScriptUtils().copyDefaultScript("velocity-example.yml", "example.yml");
            runtime.getScriptUtils().loadAllScripts();

            logger.debug("Starting WebSocket server...");
            runtime.getServer().startServer(
                    Integer.parseInt(runtime.getConfig().getKey("config.yml", "port")),
                    runtime.getConfig().getKey("config.yml", "host"),
                    runtime.getConfig().getKey("config.yml", "san"));

            logger.debug("Setting up version checker...");
            VersionChecker.setProjectId("wIuI4ru2");

            logger.debug("Checking for updates...");
            checkForUpdates();

            logger.debug("Registering internal commands...");
            runtime.getGeneralUtils().registerCommands();

            if (Main.getInstance().proxy.getPluginManager().getPlugin("papiproxybridge").isPresent()) {
                logger.info("Hooked into PapiProxyBridge — PlaceholderAPI placeholders enabled");
                placeholderAPI = true;
            } else {
                logger.warn("PapiProxyBridge not found — using internal placeholder system only");
                placeholderAPI = false;
            }
        } catch (Exception e) {
            logger.error("Failed to initialize CommandBridge: {}",
                    logger.getDebug() ? e : e.getMessage());
        }
    }

    public boolean isPlaceholderAPI() {
        return placeholderAPI;
    }

    public void stop() {
        try {
            Server server = runtime.getServer();
            logger.debug("Stopping WebSocket server...");
            for (String conn : server.getConnectedClients()) {
                runtime.getServer().sendTask(server.getWebSocket(conn), "reconnect", "closed");
            }
            runtime.getServer().stopServer(0);
        } catch (Exception e) {
            logger.error("Failed to stop CommandBridge: {}", logger.getDebug() ? e : e.getMessage());
        }
    }

    private void checkForUpdates() {
        String currentVersion = Main.getVersion();
        logger.debug("Current version: {}", currentVersion);
        new Thread(() -> {
            try {
                String latestVersion = VersionChecker.getLatestVersion();
                if (latestVersion == null) {
                    logger.warn("Unable to check for updates");
                    return;
                }
                if (VersionChecker.isNewerVersion(latestVersion, currentVersion)) {
                    logger.warn("A new version is available: {}", latestVersion);
                    logger.warn("Please download the latest release: {}", VersionChecker.getDownloadUrl());
                } else {
                    logger.info("You are running the latest version: {}", currentVersion);
                }
            } catch (Exception e) {
                logger.error("Error while checking for updates: {}", logger.getDebug() ? e : e.getMessage());
            }
        }).start();
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/helper/command/ListCommand.java">
package dev.objz.commandbridge.velocity.helper.command;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.velocitypowered.api.command.CommandSource;
import dev.objz.commandbridge.core.Logger;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;

import java.util.Set;

public class ListCommand {
    public static LiteralArgumentBuilder<CommandSource> build(Set<String> connectedClients, Logger logger) {
        return LiteralArgumentBuilder.<CommandSource>literal("list")
                .executes(context -> {
                    CommandSource source = context.getSource();

                    if (!source.hasPermission("commandbridge.admin")) {
                        source.sendMessage(Component.text("You do not have permission to list connected clients",
                                NamedTextColor.RED));
                        return 0;
                    }

                    if (connectedClients.isEmpty()) {
                        source.sendMessage(
                                Component.text("No clients are currently connected").color(NamedTextColor.RED));
                    } else {
                        String clientsString = String.join(", ", connectedClients);
                        source.sendMessage(
                                Component.text("===== Connected Clients =======").color(NamedTextColor.GOLD));
                        source.sendMessage(Component.text(clientsString).color(NamedTextColor.GREEN));
                        source.sendMessage(Component.text("============================").color(NamedTextColor.GOLD));
                    }
                    return 1;
                });
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/helper/command/ReloadCommand.java">
package dev.objz.commandbridge.velocity.helper.command;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.velocitypowered.api.command.CommandSource;
import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.velocity.util.GeneralUtils;
import dev.objz.commandbridge.core.json.MessageBuilder;
import dev.objz.commandbridge.core.Logger;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;

public class ReloadCommand {

    public static LiteralArgumentBuilder<CommandSource> build(GeneralUtils utils, Logger logger) {
        return LiteralArgumentBuilder.<CommandSource>literal("reload")
                .executes(context -> {
                    CommandSource source = context.getSource();
                    if (!source.hasPermission("commandbridge.admin")) {
                        source.sendMessage(
                                Component.text("You do not have permission to reload the plugin", NamedTextColor.RED));
                        return 0;
                    }

                    try {
                        Runtime.getInstance().getRegistrar().unregisterAllCommands();
                        logger.debug("All commands have been unregistered");

                        Runtime.getInstance().getConfig().reload();
                        logger.debug("Configuration files have been reloaded");

                        logger.setDebug(
                                Boolean.parseBoolean(Runtime.getInstance().getConfig().getKey("config.yml", "debug")));
                        logger.info("Debug mode set to: {}",
                                Runtime.getInstance().getConfig().getKey("config.yml", "debug"));

                        Runtime.getInstance().getScriptUtils().reload();
                        logger.debug("Scripts have been reloaded");

                        Runtime.getInstance().getGeneralUtils().unregisterCommands();
                        logger.debug("Internal commands have been unregistered");

                        Runtime.getInstance().getGeneralUtils().registerCommands();
                        logger.debug("Internal commands have been registered");

                        MessageBuilder builder = new MessageBuilder("system");
                        builder.addToBody("channel", "task").addToBody("task", "reload").addToBody("server",
                                Runtime.getInstance().getConfig().getKey("config.yml", "server-id"));

                        Runtime.getInstance().getServer().broadcastServerMessage(builder.build());
                        logger.debug("Sending payload: {}", builder.build());
                        source.sendMessage(
                                Component.text("Waiting for clients to respond...")
                                        .color(NamedTextColor.YELLOW));
                        logger.debug("Waiting for clients to respond...");
                        utils.startFailureCheck(source);
                        return 1;
                    } catch (Exception e) {
                        logger.error("An error occurred during the reload process: {}", e.getMessage(), e);
                        source.sendMessage(
                                Component.text("ReloadCommand failed due to an internal error. Check logs for details")
                                        .color(NamedTextColor.RED));
                    }
                    return 1;

                });
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/helper/command/StartCommand.java">
package dev.objz.commandbridge.velocity.helper.command;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.velocitypowered.api.command.CommandSource;
import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.core.Logger;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;

public class StartCommand {
    public static LiteralArgumentBuilder<CommandSource> build(Logger logger) {
        return LiteralArgumentBuilder.<CommandSource>literal("start")
                .executes(context -> {
                    CommandSource source = context.getSource();
                    if (!source.hasPermission("commandbridge.admin")) {
                        source.sendMessage(Component.text("You do not have permission to start the WebSocket server",
                                NamedTextColor.RED));
                        return 0;
                    }
                    Runtime.getInstance().getServer().startServer(
                            Integer.parseInt(Runtime.getInstance().getConfig().getKey("config.yml", "port")),
                            Runtime.getInstance().getConfig().getKey("config.yml", "host"),
                            Runtime.getInstance().getConfig().getKey("config.yml", "san"));

                    source.sendMessage(Component.text("WebSocket Server started").color(NamedTextColor.GREEN));
                    return 1;
                });
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/helper/command/StopCommand.java">
package dev.objz.commandbridge.velocity.helper.command;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.velocitypowered.api.command.CommandSource;
import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.core.Logger;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;

public class StopCommand {
    public static LiteralArgumentBuilder<CommandSource> build(Logger logger) {
        return LiteralArgumentBuilder.<CommandSource>literal("stop")
                .executes(context -> {
                    CommandSource source = context.getSource();
                    if (!source.hasPermission("commandbridge.admin")) {
                        source.sendMessage(Component.text("You do not have permission to stop the WebSocket server",
                                NamedTextColor.RED));
                        return 0;
                    }

                    Runtime.getInstance().getStartup().stop();
                    source.sendMessage(Component.text("WebSocket Server stopped").color(NamedTextColor.YELLOW));
                    return 1;
                });
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/helper/command/VersionCommand.java">
package dev.objz.commandbridge.velocity.helper.command;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.velocitypowered.api.command.CommandSource;
import dev.objz.commandbridge.velocity.Main;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.VersionChecker;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.event.ClickEvent;
import net.kyori.adventure.text.format.NamedTextColor;
import net.kyori.adventure.text.format.TextDecoration;

public class VersionCommand {
    public static LiteralArgumentBuilder<CommandSource> build(Logger logger) {
        return LiteralArgumentBuilder.<CommandSource>literal("version")
                .executes(context -> {
                    CommandSource source = context.getSource();
                    if (!source.hasPermission("commandbridge.admin")) {
                        source.sendMessage(
                                Component.text("You do not have permission to check the version", NamedTextColor.RED));
                        return 0;
                    }

                    String currentVersion = Main.getVersion();
                    source.sendMessage(Component.text("Checking for updates...").color(NamedTextColor.YELLOW));
                    logger.debug("VersionCommand executed by: {}", source);

                    new Thread(() -> {
                        String latestVersion = VersionChecker.getLatestVersion();

                        if (latestVersion == null) {
                            source.sendMessage(
                                    Component.text("Unable to check for updates").color(NamedTextColor.RED));
                            logger.warn("Failed to retrieve latest version for update check");
                            return;
                        }

                        logger.debug("Current version: {}, Latest version: {}", currentVersion, latestVersion);

                        if (VersionChecker.isNewerVersion(latestVersion, currentVersion)) {
                            source.sendMessage(
                                    Component.text("A new version is available: " + latestVersion)
                                            .color(NamedTextColor.RED));
                            source.sendMessage(
                                    Component.text("Please download the latest release: ")
                                            .append(
                                                    Component.text("here")
                                                            .color(NamedTextColor.BLUE)
                                                            .decorate(TextDecoration.UNDERLINED)
                                                            .clickEvent(ClickEvent
                                                                    .openUrl(VersionChecker.getDownloadUrl()))));
                            logger.warn("A newer version is available: {}", latestVersion);
                        } else {
                            source.sendMessage(
                                    Component.text("You are running the latest version: " + currentVersion)
                                            .color(NamedTextColor.GREEN));
                        }
                    }).start();

                    return 1;
                });
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/helper/FailureChecker.java">
package dev.objz.commandbridge.velocity.helper;

import com.velocitypowered.api.command.CommandSource;
import com.velocitypowered.api.proxy.ProxyServer;
import dev.objz.commandbridge.velocity.Main;
import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.core.Logger;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;

import java.util.concurrent.TimeUnit;

public class FailureChecker implements Runnable {
    private final Logger logger;
    private final ProxyServer proxy;
    private final Main plugin;
    private final StatusManager statusManager;
    private final CommandSource source;
    private final int maxRetries;
    private final int[] retries;

    public FailureChecker(Logger logger, ProxyServer proxy, Main plugin, StatusManager statusManager,
            CommandSource source) {
        this.logger = logger;
        this.proxy = proxy;
        this.plugin = plugin;
        this.statusManager = statusManager;
        this.source = source;
        this.maxRetries = Integer.parseInt(Runtime.getInstance().getConfig().getKey("config.yml", "timeout"));
        this.retries = new int[] { 0 };
    }

    @Override
    public void run() {
        retries[0]++;
        logger.debug("Failure check attempt {}/{}", retries[0], maxRetries);

        try {
            String failedClients = statusManager.checkForFailures();

            if (failedClients == null) {
                source.sendMessage(
                        Component.text("Everything has reloaded successfully!")
                                .color(NamedTextColor.GREEN));
                logger.info("Scripts reloaded successfully");
                statusManager.clearStatusMap();
            } else if (retries[0] >= maxRetries) {
                source.sendMessage(
                        Component.text("ReloadCommand failed: " + failedClients)
                                .color(NamedTextColor.RED));
                logger.error("Reload command failed '{}'", failedClients);
                statusManager.clearStatusMap();
            } else {
                proxy.getScheduler().buildTask(plugin, this).delay(1, TimeUnit.SECONDS).schedule();
            }
        } catch (Exception e) {
            logger.error("An error occurred during the reload process: {}", logger.getDebug() ? e : e.getMessage());
            source.sendMessage(
                    Component.text("Reload command failed due to an internal error. Check logs for details")
                            .color(NamedTextColor.RED));
        }
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/helper/HelpCommand.java">
package dev.objz.commandbridge.velocity.helper;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.velocitypowered.api.command.CommandSource;
import dev.objz.commandbridge.core.Logger;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.event.ClickEvent;
import net.kyori.adventure.text.format.NamedTextColor;
import net.kyori.adventure.text.format.TextDecoration;

public class HelpCommand {
    public static LiteralArgumentBuilder<CommandSource> build(Logger logger) {
        return LiteralArgumentBuilder.<CommandSource>literal("help")
                .executes(context -> sendHelpMessage(context.getSource(), logger));
    }

    public static int sendHelpMessage(CommandSource source, Logger logger) {
        logger.debug("Sending help message to: {}", source);

        source.sendMessage(Component.text("==== CommandBridge Help ====").color(NamedTextColor.GOLD));
        source.sendMessage(Component.text(""));

        source.sendMessage(Component.text("Available Commands:").color(NamedTextColor.YELLOW));

        source.sendMessage(formatCommand("help", "Displays this help message", false));
        source.sendMessage(formatCommand("list", "Lists connected clients", false));
        source.sendMessage(formatCommand("reload", "Reloads all configs and scripts", false));
        source.sendMessage(formatCommand("version", "Displays the current version", false));

        source.sendMessage(Component.text(""));
        source.sendMessage(Component.text("Debug Commands (Debug mode only):").color(NamedTextColor.RED));
        source.sendMessage(formatCommand("stop", "Stops the cb server", false));
        source.sendMessage(formatCommand("start", "Starts the cb server", false));

        source.sendMessage(Component.text(""));
        source.sendMessage(Component.text("Client Commands (/cbc):").color(NamedTextColor.AQUA));
        source.sendMessage(formatCommand("reconnect", "Reconnects the current client", true));

        source.sendMessage(Component.text(""));
        source.sendMessage(Component.text("Website: ")
                .append(Component.text("https://cb.objz.dev")
                        .color(NamedTextColor.LIGHT_PURPLE)
                        .decorate(TextDecoration.UNDERLINED)
                        .clickEvent(ClickEvent.openUrl("https://cb.objz.dev"))));

        source.sendMessage(Component.text(""));
        source.sendMessage(Component.text("============================").color(NamedTextColor.GOLD));
        return 1;
    }

    private static Component formatCommand(String command, String description, boolean client) {
        String alias = client ? "/cbc " : "/cb ";
        return Component.text("  - ")
                .append(Component.text(alias + command).color(NamedTextColor.GREEN))
                .append(Component.text(" - " + description).color(NamedTextColor.WHITE));
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/helper/InternalRegistrar.java">
package dev.objz.commandbridge.velocity.helper;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.tree.LiteralCommandNode;
import com.velocitypowered.api.command.BrigadierCommand;
import com.velocitypowered.api.command.CommandSource;
import com.velocitypowered.api.proxy.ProxyServer;
import dev.objz.commandbridge.velocity.Main;
import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.velocity.helper.command.DumpCommand;
import dev.objz.commandbridge.velocity.helper.command.ListCommand;
import dev.objz.commandbridge.velocity.helper.command.ReloadCommand;
import dev.objz.commandbridge.velocity.helper.command.StartCommand;
import dev.objz.commandbridge.velocity.helper.command.StopCommand;
import dev.objz.commandbridge.velocity.helper.command.VersionCommand;
import dev.objz.commandbridge.core.Logger;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;

import java.util.Set;

public class InternalRegistrar {
    private final Logger logger;
    private final ProxyServer proxy;
    private final Main plugin;
    private final Set<String> connectedClients;

    public InternalRegistrar(Logger logger, ProxyServer proxy, Main plugin, Set<String> connectedClients) {
        this.logger = logger;
        this.proxy = proxy;
        this.plugin = plugin;
        this.connectedClients = connectedClients;
    }

    public void registerCommands() {
        logger.info("Registering commands for CommandBridge...");
        try {
            LiteralArgumentBuilder<CommandSource> commandBridgeBuilder = LiteralArgumentBuilder
                    .<CommandSource>literal("commandbridge")
                    .executes(context -> {
                        if (context.getSource().hasPermission("commandbridge.admin")) {
                            return HelpCommand.sendHelpMessage(context.getSource(), logger);
                        }
                        context.getSource().sendMessage(
                                Component.text("You do not have permission to use this command", NamedTextColor.RED));
                        return 0;
                    });

            commandBridgeBuilder.then(ReloadCommand.build(Runtime.getInstance().getGeneralUtils(), logger));
            commandBridgeBuilder.then(VersionCommand.build(logger));
            commandBridgeBuilder.then(HelpCommand.build(logger));
            commandBridgeBuilder.then(ListCommand.build(connectedClients, logger));
            commandBridgeBuilder.then(DumpCommand.build(connectedClients, logger));
            if (logger.getDebug()) {
                commandBridgeBuilder.then(StopCommand.build(logger));
                commandBridgeBuilder.then(StartCommand.build(logger));
            }

            LiteralCommandNode<CommandSource> commandBridgeNode = commandBridgeBuilder.build();

            Runtime.getInstance().getGeneralUtils().setMeta(proxy.getCommandManager()
                    .metaBuilder("commandbridge")
                    .aliases("cb")
                    .plugin(plugin)
                    .build());

            BrigadierCommand brigadierCommand = new BrigadierCommand(commandBridgeNode);
            proxy.getCommandManager().register(Runtime.getInstance().getGeneralUtils().getMeta(), brigadierCommand);
            logger.info("CommandBridge commands registered successfully");
        } catch (Exception e) {
            logger.error("Failed to register CommandBridge commands: {}", logger.getDebug() ? e : e.getMessage());
        }
    }

}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/helper/StatusManager.java">
package dev.objz.commandbridge.velocity.helper;

import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.core.Logger;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class StatusManager {
    private final Logger logger;
    private final Map<String, String> statusMap = new HashMap<>();
    private final Set<String> connectedClients = Runtime.getInstance().getServer().getConnectedClients();

    public StatusManager(Logger logger) {
        this.logger = logger;
    }

    public void addClientToStatus(String clientId, String status) {
        statusMap.put(clientId, status);
        logger.debug("Updated statusMap: {}", statusMap);
    }

    public void clearStatusMap() {
        statusMap.clear();
    }

    public String checkForFailures() {
        logger.debug("Checking for failures...");

        List<String> missingClients = connectedClients.stream()
                .filter(client -> !statusMap.containsKey(client))
                .toList();

        if (!missingClients.isEmpty()) {
            String missingClientString = String.join(", ", missingClients);
            logger.warn("Waiting for responses from clients: {}", missingClientString);
            return "Missing responses from: " + missingClientString;
        }

        String failedClients = statusMap.entrySet().stream()
                .filter(entry -> !"success".equals(entry.getValue()))
                .map(Map.Entry::getKey)
                .reduce((a, b) -> a + ", " + b)
                .orElse(null);

        if (failedClients != null) {
            logger.error("Failure detected on clients: {}", failedClients);
            return "Failure detected on: " + failedClients;
        }

        logger.debug("No failures detected. All clients are operational");
        return null;
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/util/GeneralUtils.java">
package dev.objz.commandbridge.velocity.util;

import com.velocitypowered.api.command.CommandMeta;
import com.velocitypowered.api.command.CommandSource;
import com.velocitypowered.api.proxy.ProxyServer;
import dev.objz.commandbridge.velocity.Main;
import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.velocity.helper.InternalRegistrar;
import dev.objz.commandbridge.velocity.helper.FailureChecker;
import dev.objz.commandbridge.velocity.helper.StatusManager;
import dev.objz.commandbridge.core.Logger;

import java.util.Set;
import java.util.concurrent.TimeUnit;

public class GeneralUtils {
    private final Logger logger;
    private final ProxyServer proxy;
    private final Main plugin;
    private final StatusManager statusManager;
    private final Set<String> connectedClients;
    private CommandMeta meta;

    public GeneralUtils(Logger logger) {
        this.logger = logger;
        this.proxy = ProxyUtils.getProxyServer();
        this.plugin = Main.getInstance();
        this.connectedClients = Runtime.getInstance().getServer().getConnectedClients();
        this.statusManager = new StatusManager(logger);
    }

    public void addClientToStatus(String clientId, String status) {
        statusManager.addClientToStatus(clientId, status);
    }

    public void startFailureCheck(CommandSource source) {
        statusManager.clearStatusMap();
        FailureChecker checkTask = new FailureChecker(logger, proxy, plugin, statusManager, source);
        try {
            proxy.getScheduler().buildTask(plugin, checkTask).delay(1, TimeUnit.SECONDS).schedule();
        } catch (Exception e) {
            logger.error("Failed to schedule the reload check task: {}", logger.getDebug() ? e : e.getMessage());
            source.sendMessage(
                    net.kyori.adventure.text.Component.text("Reload command failed: Unable to start the failure check")
                            .color(net.kyori.adventure.text.format.NamedTextColor.RED));
        }
    }

    public void registerCommands() {
        InternalRegistrar registrar = new InternalRegistrar(logger, proxy, plugin, connectedClients);
        registrar.registerCommands();
    }

    public CommandMeta getMeta() {
        return meta;
    }

    public void setMeta(CommandMeta commandMeta) {
        meta = commandMeta;
    }

    public void unregisterCommands() {
        proxy.getCommandManager().unregister(meta);
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/util/ProxyUtils.java">
package dev.objz.commandbridge.velocity.util;

import com.velocitypowered.api.proxy.ProxyServer;

import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.core.Logger;

public class ProxyUtils {
    private static ProxyServer proxyServer;
    private static final Logger logger = Runtime.getInstance().getLogger();

    private ProxyUtils() {
    }

    public static synchronized void setProxyServer(ProxyServer server) {
        if (proxyServer == null) {
            proxyServer = server;
        } else {
            logger.error("Attempted to set ProxyServer instance more than once!");
            throw new IllegalStateException("Proxy instance is already set!");
        }
    }

    public static synchronized ProxyServer getProxyServer() {
        if (proxyServer == null) {
            logger.error("Attempted to retrieve ProxyServer instance before initialization!");
            throw new IllegalStateException("Proxy instance is not initialized!");
        }
        return proxyServer;
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/util/ScriptUtils.java">
package dev.objz.commandbridge.velocity.util;

import dev.objz.commandbridge.velocity.command.CommandRegistrar;
import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.ScriptManager;

public class ScriptUtils extends ScriptManager {
    private final Logger logger;
    private final CommandRegistrar registrar;

    public ScriptUtils(Logger logger, String pluginName) {
        super(logger, pluginName);
        this.logger = logger;
        this.registrar = Runtime.getInstance().getRegistrar();
    }

    @Override
    public void onFileProcessed(String fileName, ScriptConfig scriptConfig) {
        if (scriptConfig.isEnabled()) {
            logger.info("Loaded script: {}", fileName);
            try {
                registrar.registerCommand(getScriptConfig(fileName));
                Runtime.getInstance().getEncoder().addScriptConfig(scriptConfig);
                logger.debug("Registered command: {}", scriptConfig.getName());
            } catch (Exception e) {
                logger.error("Failed to register script '{}' : {}",
                        scriptConfig.getName(),
                        logger.getDebug() ? e : e.getMessage());
            }
        } else {
            logger.info("Skipped disabled script: {}", scriptConfig.getName());
        }
    }
}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/websocket/HttpServer.java">
package dev.objz.commandbridge.velocity.websocket;

import dev.objz.commandbridge.core.Logger;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.channel.ChannelHandler.Sharable;
import io.netty.handler.codec.http.DefaultFullHttpResponse;
import io.netty.handler.codec.http.FullHttpRequest;
import io.netty.handler.codec.http.FullHttpResponse;
import io.netty.handler.codec.http.HttpHeaderNames;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.ssl.NotSslRecordException;

import static io.netty.handler.codec.http.HttpResponseStatus.*;
import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;

import javax.net.ssl.SSLHandshakeException;

@Sharable
public class HttpServer extends SimpleChannelInboundHandler<FullHttpRequest> {
    private Logger logger;

    public HttpServer(Logger logger) {
        this.logger = logger;
    }

    @Override
    protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) {
        String uri = msg.uri();
        logger.debug("Incoming HTTP request to: {}", uri);

        if ("/ping".equalsIgnoreCase(uri)) {
            sendTextResponse(ctx, OK, "pong");
        } else if ("websocket".equalsIgnoreCase(msg.headers().get(HttpHeaderNames.UPGRADE))) {
            ctx.fireChannelRead(msg.retain());
        } else {
            sendTextResponse(ctx, NOT_FOUND, "Not Found");
        }
    }

    private void sendTextResponse(ChannelHandlerContext ctx, HttpResponseStatus status, String content) {
        FullHttpResponse response = new DefaultFullHttpResponse(
                HTTP_1_1,
                status,
                ctx.alloc().buffer().writeBytes(content.getBytes()));
        response.headers().set(HttpHeaderNames.CONTENT_TYPE, "text/plain");
        response.headers().set(HttpHeaderNames.CONTENT_LENGTH, response.content().readableBytes());
        ctx.writeAndFlush(response);
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
        if (cause instanceof NotSslRecordException || cause instanceof SSLHandshakeException) {
            if (logger.getDebug()) {
                logger.debug("SSL handshake or protocol error", cause);
            } else {
                logger.warn("Received invalid or unsupported SSL/TLS connection (enable debug for full trace)");
            }
        } else {
            if (logger.getDebug()) {
                logger.error("Unexpected error in HttpServer handler", cause);
            } else {
                logger.error("Unexpected error in HttpServer handler: {}", cause.getMessage());
            }
        }
        ctx.close();
    }

}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/websocket/Server.java">
package dev.objz.commandbridge.velocity.websocket;

import java.util.*;

import com.velocitypowered.api.proxy.Player;

import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.core.json.MessageBuilder;
import dev.objz.commandbridge.core.json.MessageParser;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.websocket.WebSocketServer;
import io.netty.channel.Channel;

public class Server extends WebSocketServer {
    private final Logger logger;
    private final Map<String, Channel> clientConnections = new HashMap<>();

    public Server(Logger logger, String secret) {
        super(logger, secret);
        super.addHttpHandler(Runtime.getInstance().getHttpServer());
        this.logger = logger;
    }

    @Override
    protected void onMessage(Channel webSocket, String message) {
        MessageParser parser = new MessageParser(message);
        logger.debug("Received message: {}", message);
        try {
            String type = parser.getType();
            switch (type) {
                case "command" -> handleCommandRequest(webSocket, message);
                case "system" -> handleSystemRequest(webSocket, message);
                default -> {
                    logger.warn("Invalid type: {}", type);
                    sendError(webSocket, "Invalid type: " + type);
                }
            }
        } catch (Exception e) {
            logger.error("Error while processing message: {}",
                    logger.getDebug() ? e : e.getMessage());
            sendError(webSocket, "Internal server error: " + e.getMessage());
        }
    }

    @Override
    protected void onConnectionClose(Channel conn, int code, String reason) {
        String clientAddress = conn.remoteAddress().toString();

        if (getConnections().contains(conn)) {
            String disconnectedClientName = clientConnections.entrySet().stream()
                    .filter(entry -> entry.getValue().equals(conn))
                    .map(Map.Entry::getKey)
                    .findFirst()
                    .orElse(null);

            logger.info("Client '{}' disconnected", clientAddress);
            if (disconnectedClientName != null) {
                clientConnections.remove(disconnectedClientName);
                logger.debug("Removed disconnected client: {}", disconnectedClientName);
            } else {
                logger.warn("Disconnected WebSocket client '{}' not found in client connections map.", clientAddress);
            }
        }
    }

    private void handleCommandRequest(Channel webSocket, String message) {
        logger.debug("Handling command request");
        Runtime.getInstance().getCommandExecutor().dispatchCommand(message);
    }

    private void handleSystemRequest(Channel webSocket, String message) {
        logger.debug("Handling system request");
        MessageParser parser = new MessageParser(message);
        String channel = parser.getBodyValueAsString("channel");
        String name = parser.getBodyValueAsString("name");
        String client = parser.getBodyValueAsString("client");
        String status = parser.getStatus();

        switch (channel) {
            case "name" -> {
                if (name != null) {
                    clientConnections.put(name, webSocket);
                    logger.info("Added connected client: {}", name);
                } else {
                    logger.warn("Client did not provide 'name' in system request");
                }
            }
            case "error" -> logger.warn("Message from client '{}' : {}", client, status);
            case "info" -> logger.info("Message from client '{}' : {}", client, status);
            case "task" -> systemTask(parser, status, client);
            default -> logger.warn("Invalid channel: {}", channel);
        }
    }

    private void systemTask(MessageParser parser, String status, String client) {
        String task = parser.getBodyValueAsString("task");
        switch (task) {
            case "reload" -> Runtime.getInstance().getGeneralUtils().addClientToStatus(client, parser.getStatus());
            case "dump" -> Runtime.getInstance().getEncoder().addClient(parser.getBodyValueAsString("client"), parser.getBodyValueAsString("compressed"));
            default -> logger.warn("Invalid task: {}", task);
        }
    }

    public void sendError(Channel webSocket, String errorMessage) {
        MessageBuilder builder = new MessageBuilder("system");
        builder.addToBody("channel", "error")
                .addToBody("server", Runtime.getInstance().getConfig().getKey("config.yml", "server-id"))
                .withStatus(errorMessage);
        sendMessage(builder.build(), webSocket);
    }

    public void sendInfo(Channel webSocket, String infoMessage) {
        MessageBuilder builder = new MessageBuilder("system");
        builder.addToBody("channel", "info")
                .addToBody("server", Runtime.getInstance().getConfig().getKey("config.yml", "server-id"))
                .withStatus(infoMessage);
        sendMessage(builder.build(), webSocket);
    }

    public void sendTask(Channel webSocket, String task, String status) {
        MessageBuilder builder = new MessageBuilder("system");
        builder.addToBody("channel", "task").addToBody("task", task)
                .addToBody("server", Runtime.getInstance().getConfig().getKey("config.yml", "server-id"))
                .withStatus(status);
        sendMessage(builder.build(), webSocket);
    }

    public void sendCommand(String command, String client, String target, Player executor) {
        Channel conn = clientConnections.get(client);
        if (conn == null) {
            logger.warn("Client '{}' is not connected, cannot send message.", client);
            return;
        }

        MessageBuilder builder = new MessageBuilder("command");
        builder.addToBody("command", command).addToBody("client", client).addToBody("target", target);

        if (target.equals("player")) {
            builder.addToBody("name", executor.getUsername()).addToBody("uuid", executor.getUniqueId());
        }
        logger.info("Sending command '{}' to client: {}", command, client);
        logger.debug("Sending payload: {}", builder.build().toString());
        sendMessage(builder.build(), conn);
    }

    public boolean isServerConnected(String clientName) {
        boolean exists = clientConnections.containsKey(clientName);
        logger.debug("Checking if client '{}' is connected: {}", clientName, exists);
        return exists;
    }

    public Set<String> getConnectedClients() {
        return clientConnections.keySet();
    }

    public Channel getWebSocket(String client) {
        return clientConnections.get(client);
    }

}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/Main.java">
package dev.objz.commandbridge.velocity;

import java.io.InputStream;
import java.util.Properties;

import org.bstats.velocity.Metrics;

import com.google.inject.Inject;
import com.velocitypowered.api.event.Subscribe;
import com.velocitypowered.api.event.connection.PostLoginEvent;
import com.velocitypowered.api.event.proxy.ProxyInitializeEvent;
import com.velocitypowered.api.event.proxy.ProxyShutdownEvent;
import com.velocitypowered.api.plugin.Plugin;
import com.velocitypowered.api.proxy.Player;
import com.velocitypowered.api.proxy.ProxyServer;

import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.velocity.util.ProxyUtils;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.VersionChecker;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.event.ClickEvent;
import net.kyori.adventure.text.format.NamedTextColor;
import net.kyori.adventure.text.format.TextDecoration;

@Plugin(id = "commandbridge", name = "CommandBridge", version = "Unknown", authors = "objz")
public class Main {
    private static Main instance;
    public final ProxyServer proxy;
    private final Logger logger;
    private final Metrics.Factory metricsFactory;

    @Inject
    public Main(ProxyServer proxy, Logger bLogger, Metrics.Factory metricsFactory) {
        this.proxy = proxy;
        this.logger = Runtime.getInstance().getLogger();
        instance = this;
        this.metricsFactory = metricsFactory;
        ProxyUtils.setProxyServer(proxy);
    }

    public static Main getInstance() {
        return instance;
    }

    public static String getVersion() {
        try (InputStream input = Main.class.getClassLoader().getResourceAsStream("plugin.properties")) {
            if (input == null) {
                return "Unknown";
            }
            Properties properties = new Properties();
            properties.load(input);
            return properties.getProperty("plugin.version", "Unknown");
        } catch (Exception e) {
            e.printStackTrace();
            return "Unknown";
        }
    }

    public String getVelocityVersion() {
        return proxy.getVersion().getVersion().toString();
    }

    @Subscribe
    public void onProxyInitialization(ProxyInitializeEvent event) {
        logger.info("Initializing CommandBridge...");
        Runtime.getInstance().getStartup().start();
        int pluginId = 22008;
        metricsFactory.make(this, pluginId);

    }

    @Subscribe
    public void onProxyShutdown(ProxyShutdownEvent event) {
        logger.info("Stopping CommandBridge...");
        Runtime.getInstance().getStartup().stop();
    }

    @Subscribe
    public void onPlayerJoin(PostLoginEvent event) {
        Player player = event.getPlayer();
        if (player == null) {
            logger.warn("PostLoginEvent triggered with a null player object.");
            return;
        }

        if (player.hasPermission("commandbridge.admin")) {
            logger.debug("Player '{}' has admin permissions. Checking for updates...", player.getUsername());

            proxy.getScheduler().buildTask(this, () -> {
                String currentVersion = Main.getVersion();
                String latestVersion = VersionChecker.getLatestVersion();

                if (latestVersion == null) {
                    player.sendMessage(Component.text("Unable to check for updates.").color(NamedTextColor.RED));
                    logger.warn("Update check failed: Unable to retrieve the latest version.");
                    return;
                }

                if (VersionChecker.isNewerVersion(latestVersion, currentVersion)) {
                    player.sendMessage(Component.text("A new version of CommandBridge is available: " + latestVersion)
                            .color(NamedTextColor.RED));
                    player.sendMessage(Component.text("Please download the latest release: ")
                            .append(Component.text("here")
                                    .color(NamedTextColor.BLUE)
                                    .decorate(TextDecoration.UNDERLINED)
                                    .clickEvent(ClickEvent.openUrl(VersionChecker.getDownloadUrl()))));
                    logger.debug("Notified player '{}' about the new version: {}", player.getUsername(), latestVersion);
                } else {
                    logger.debug("Player '{}' is running the latest version: {}", player.getUsername(), currentVersion);
                }
            }).schedule();
        } else {
            logger.debug("Player {} does not have admin permissions. No update check performed.", player.getUsername());
        }
    }
}
</file>

<file path="LICENSE">
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.
</file>

<file path="paper/src/main/java/dev/objz/commandbridge/paper/command/CommandRegistrar.java">
package dev.objz.commandbridge.paper.command;

import java.util.ArrayList;
import java.util.List;

import dev.objz.commandbridge.paper.core.Runtime;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.ScriptManager;
import dev.jorel.commandapi.CommandAPI;
import dev.jorel.commandapi.CommandAPICommand;
import dev.jorel.commandapi.arguments.GreedyStringArgument;

public class CommandRegistrar {
    private final Logger logger;
    private final CommandForwarder forwarder;
    private final List<String> registeredCommands = new ArrayList<>();

    public CommandRegistrar(Logger logger) {
        this.logger = logger;
        this.forwarder = Runtime.getInstance().getForwarder();
    }

    public void unregisterAllCommands() {
        for (String command : registeredCommands) {
            try {
                CommandAPI.unregister(command);
                logger.debug("Unregistered command: {}", command);
            } catch (Exception e) {
                logger.error("Failed to unregister command '{}' : {}",
                        command,
                        logger.getDebug() ? e : e.getMessage());
            }
        }
        registeredCommands.clear();
        logger.info("All registered commands have been unregistered.");

    }

    public void registerCommand(ScriptManager.ScriptConfig script) {
        String commandName = script.getName();

        try {
            CommandAPICommand command = new CommandAPICommand(commandName)
                    .withOptionalArguments(new GreedyStringArgument("args"))
                    .withAliases(script.getAliases().toArray(new String[0]))
                    .executes((sender, args) -> {
                        String argsString = (String) args.get("args");
                        logger.debug("Command '{}' called with arguments: {}", commandName, argsString);
                        String[] splitArgs = argsString != null ? argsString.split(" ") : new String[0];
                        return forwarder.executeScriptCommands(sender, script, splitArgs);
                    });
            command.register();
            registeredCommands.add(commandName);
        } catch (Exception e) {
            logger.error(
                    "Failed to register command '{}' : {}",
                    commandName,
                    logger.getDebug() ? e : e.getMessage());
        }
    }

}
</file>

<file path="velocity/src/main/java/dev/objz/commandbridge/velocity/command/CommandRegistrar.java">
package dev.objz.commandbridge.velocity.command;

import java.util.HashMap;
import java.util.Map;

import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.builder.RequiredArgumentBuilder;
import com.velocitypowered.api.command.BrigadierCommand;
import com.velocitypowered.api.command.CommandMeta;
import com.velocitypowered.api.command.CommandSource;
import com.velocitypowered.api.proxy.ProxyServer;

import dev.objz.commandbridge.velocity.core.Runtime;
import dev.objz.commandbridge.velocity.util.ProxyUtils;
import dev.objz.commandbridge.core.Logger;
import dev.objz.commandbridge.core.utils.ScriptManager;

public class CommandRegistrar {
    private final Logger logger;
    private final ProxyServer proxy;
    private final CommandForwarder helper;
    private final Map<String, CommandMeta> registeredCommands = new HashMap<>();

    public CommandRegistrar(Logger logger) {
        this.logger = logger;
        this.proxy = ProxyUtils.getProxyServer();
        this.helper = Runtime.getInstance().getHelper();
    }

    public void unregisterAllCommands() {
        for (String command : registeredCommands.keySet()) {
            try {
                CommandMeta commandMeta = registeredCommands.get(command);
                proxy.getCommandManager().unregister(commandMeta);
                logger.debug("Unregistered command: {}", command);
            } catch (Exception e) {
                logger.error("Failed to unregister command '{}' : {}",
                        command,
                        logger.getDebug() ? e : e.getMessage());
            }
        }
        registeredCommands.clear();
        logger.info("All registered commands have been unregistered.");
    }

    public void registerCommand(ScriptManager.ScriptConfig script) {
        String commandName = script.getName();
        try {
            LiteralArgumentBuilder<CommandSource> commandBuilder = LiteralArgumentBuilder
                    .<CommandSource>literal(commandName)
                    .executes(context -> {
                        logger.debug("Executing base command: {}", commandName);
                        return helper.executeScriptCommands(context.getSource(), script, new String[0]);
                    });
            RequiredArgumentBuilder<CommandSource, String> argsArgument = RequiredArgumentBuilder
                    .<CommandSource, String>argument("args", StringArgumentType.greedyString())
                    .executes(context -> {
                        String argsString = context.getArgument("args", String.class);
                        logger.debug("Command '{}' called with arguments: {}", commandName, argsString);
                        String[] args = argsString.split(" ");
                        return helper.executeScriptCommands(context.getSource(), script, args);
                    });
            commandBuilder.then(argsArgument);

            // LiteralCommandNode<CommandSource> rootNode = commandBuilder.build();
            BrigadierCommand brigadierCommand = new BrigadierCommand(commandBuilder.build());
            CommandMeta commandMeta = proxy.getCommandManager().metaBuilder(commandName)
                    .aliases(script.getAliases().toArray(new String[0])).build();

            proxy.getCommandManager().register(commandMeta, brigadierCommand);
            registeredCommands.put(commandName, commandMeta);
        } catch (Exception e) {
            logger.error(
                    "Failed to register command '{}' : {}",
                    commandName,
                    logger.getDebug() ? e : e.getMessage());
        }
    }

}
</file>

<file path="velocity/src/main/resources/velocity-example.yml">
##########################################################################
# EXAMPLE CONFIGURATION
# This file demonstrates how to dispatch a command to the Velocity server,
# where the commands are executed on the Bukkit servers.
##########################################################################

# The name of the command to be dispatched.
# This is the identifier for the command configuration.
name: examplevelocity

# Enable or disable this command.
# Set to true to allow the command to be executed, or false to disable it.
enabled: true

# A list of aliases for the command.
# Remove all or use [] to disable aliases.
aliases:   
  - examplevelocitycmd

# Ignore permission checks for this command.
# Set to true to bypass permission validation, or false to enforce it.
ignore-permission-check: false

# Hide permission warnings when the executor does not have the required permissions.
# Set to true to suppress warnings, or false to show them.
hide-permission-warning: false

# A list of commands to execute on the target servers.
commands:
  # Command 1
  - command: 'say Hello, world!'  # The command string to be executed (use single quotes).
    delay: 0                      # Delay (in seconds) before executing the command.
    target-client-ids:            # List of target server IDs where the command will be executed.
      - 'lobby'
      - 'survival'
    target-executor: 'player'     # Who executes the command: 'player' or 'console'.
    wait-until-player-is-online: true  # If true, waits until the player is online to execute.
    check-if-executor-is-player: true  # If true, ensures the executor is a player.
    check-if-executor-is-on-server: true # If true, ensures the executor is online on the server.

  # Command 2
  - command: 'say I love Coding!' # The command string to be executed (use single quotes).
    delay: 0                      # Delay (in seconds) before executing the command.
    target-client-ids:            # List of target server IDs where the command will be executed.
      - 'lobby'
    target-executor: 'player'     # Who executes the command: 'player' or 'console'.
    wait-until-player-is-online: true  # If true, waits until the player is online to execute.
    check-if-executor-is-player: false # If true, ensures the executor is a player.
    check-if-executor-is-on-server: false # If true, ensures the executor is online on the server.
</file>

<file path="server.sh">
#!/bin/bash

# Server paths
SERVER1_DIR="/mnt/Storage/Server-TEST/CommandBridge/Velocity/"
SERVER2_DIR="/mnt/Storage/Server-TEST/CommandBridge/Paper/"

# Server JAR files
SERVER1_JAR="velocity-3.3.0-SNAPSHOT-436.jar"
SERVER2_JAR="paper-1.20-17.jar"

# Function to run a server
run_server() {
  local server_dir=$1
  local server_jar=$2
  local extra_args=$3
  cd "$server_dir" || exit
  java -Xmx1024M -Xms1024M -jar "$server_jar" $extra_args
}

# Start the first server in the current terminal
echo "Starting Velocity server in the current terminal..."
run_server "$SERVER1_DIR" "$SERVER1_JAR" &

# Start the second server in a new Kitty terminal with nogui flag
echo "Starting Bukkit server in a new Kitty terminal..."
kitty bash -c "cd '$SERVER2_DIR' && java -Xmx1024M -Xms1024M -jar '$SERVER2_JAR' nogui; exec bash"

# Wait for the first server to complete
wait
</file>

<file path="core/src/main/java/dev/objz/commandbridge/core/utils/ScriptManager.java">
package dev.objz.commandbridge.core.utils;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;

import dev.objz.commandbridge.core.Logger;

public abstract class ScriptManager {
    private final Map<String, ScriptConfig> scripts = new HashMap<>();
    private final Yaml yaml;
    private final Logger logger;
    private final String scriptsDirectory;

    public ScriptManager(Logger logger, String pluginName) {
        this.logger = logger;
        this.scriptsDirectory = "plugins" + File.separator + pluginName + File.separator + "scripts";

        DumperOptions options = new DumperOptions();
        options.setIndent(2);
        options.setPrettyFlow(true);
        options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
        yaml = new Yaml(options);
    }

    public void loadAllScripts() {
        File dir = new File(scriptsDirectory);
        if (!dir.exists() && !dir.mkdirs()) {
            throw new RuntimeException("Failed to create scripts directory: " + scriptsDirectory);
        }

        try {
            Files.list(dir.toPath())
                    .filter(path -> path.toString().endsWith(".yml"))
                    .forEach(this::loadScriptFile);

            logger.debug("All script files have been loaded from directory: {}", scriptsDirectory);
        } catch (IOException e) {
            throw new RuntimeException("Failed to load scripts: " + e.getMessage(), e);
        }
    }

    public void reload() {
        scripts.clear();

        loadAllScripts();

        logger.info("All scripts have been successfully reloaded");
    }

    private void loadScriptFile(Path path) {
        try (InputStream inputStream = Files.newInputStream(path)) {
            Map<String, Object> fileData = yaml.load(inputStream);
            if (fileData == null)
                fileData = new HashMap<>();

            ScriptConfig scriptConfig = new ScriptConfig(fileData);
            scripts.put(path.getFileName().toString(), scriptConfig);

            logger.debug("Script file loaded successfully: {}", path.getFileName().toString());

            onFileProcessed(path.getFileName().toString(), scriptConfig);
        } catch (IOException e) {
            throw new RuntimeException("Failed to load script file '" + path.getFileName() + "': " + e.getMessage(), e);
        }
    }

    public ScriptConfig getScriptConfig(String fileName) {
        logger.debug("Retrieved config");
        return scripts.get(fileName);
    }

    public void copyDefaultScript(String resourceName, String targetFileName) {
        File scriptDir = new File(scriptsDirectory);
        if (!scriptDir.exists() && !scriptDir.mkdirs()) {
            throw new RuntimeException("Failed to create script directory: " + scriptsDirectory);
        }

        File scriptFile = new File(scriptDir, targetFileName);

        if (scriptFile.exists()) {
            logger.debug("Script file '{}' already exists, skipping copy", scriptFile.getAbsolutePath());
            return;
        }

        try (InputStream in = getClass().getResourceAsStream("/" + resourceName);
                OutputStream out = Files.newOutputStream(scriptFile.toPath())) {
            if (in == null) {
                throw new RuntimeException("Resource '" + resourceName + "' not found in the plugin JAR");
            }

            byte[] buffer = new byte[1024];
            int len;
            while ((len = in.read(buffer)) != -1) {
                out.write(buffer, 0, len);
            }
            logger.info("Default script '{}' copied to: {}", resourceName, scriptFile.getAbsolutePath());
        } catch (IOException e) {
            throw new RuntimeException("Failed to copy default script file " + resourceName + ": " + e.getMessage(), e);
        }
    }

    public static class ScriptConfig {
        private final String name;
        private final List<String> aliases = new ArrayList<>();
        private final boolean enabled;
        private final boolean ignorePermissionCheck;
        private final boolean hidePermissionWarning;
        private final List<Command> commands;

        @SuppressWarnings("unchecked")
        public ScriptConfig(Map<String, Object> data) {
            this.name = (String) data.getOrDefault("name", "Unnamed Command");

            Object aliasesRaw = data.get("aliases");
            if (aliasesRaw instanceof List<?> rawList) {
                for (Object alias : rawList) {
                    if (alias instanceof String str) {
                        this.aliases.add(str);
                    }
                }
            }

            this.enabled = (boolean) data.getOrDefault("enabled", false);
            this.ignorePermissionCheck = (boolean) data.getOrDefault("ignore-permission-check", false);
            this.hidePermissionWarning = (boolean) data.getOrDefault("hide-permission-warning", false);

            this.commands = new ArrayList<>();
            Object commandsObject = data.get("commands");
            if (commandsObject instanceof List<?> commandsList) {
                for (Object commandData : commandsList) {
                    if (commandData instanceof Map) {
                        commands.add(new Command((Map<String, Object>) commandData));
                    }
                }
            }
        }

        public String getName() {
            return name;
        }

        public List<String> getAliases() {
            return aliases;
        }

        public boolean isEnabled() {
            return enabled;
        }

        public boolean shouldIgnorePermissionCheck() {
            return ignorePermissionCheck;
        }

        public boolean shouldHidePermissionWarning() {
            return hidePermissionWarning;
        }

        public List<Command> getCommands() {
            return commands;
        }
    }

    public static class Command {
        private final String command;
        private final int delay;
        private final List<String> targetClientIds;
        private final String targetExecutor;
        private final boolean waitUntilPlayerIsOnline;
        private final boolean checkIfExecutorIsPlayer;
        private final boolean checkIfExecutorIsOnServer;

        @SuppressWarnings("unchecked")
        public Command(Map<String, Object> data) {
            this.command = (String) data.get("command");
            this.delay = (int) data.getOrDefault("delay", 0);
            this.targetClientIds = (List<String>) data.getOrDefault("target-client-ids", new ArrayList<>());
            this.targetExecutor = (String) data.getOrDefault("target-executor", "console");
            this.waitUntilPlayerIsOnline = (boolean) data.getOrDefault("wait-until-player-is-online", false);
            this.checkIfExecutorIsPlayer = (boolean) data.getOrDefault("check-if-executor-is-player", true);
            this.checkIfExecutorIsOnServer = (boolean) data.getOrDefault("check-if-executor-is-on-server", true);
        }

        public String getCommand() {
            return command;
        }

        public int getDelay() {
            return delay;
        }

        public List<String> getTargetClientIds() {
            return targetClientIds;
        }

        public String getTargetExecutor() {
            return targetExecutor;
        }

        public boolean shouldWaitUntilPlayerIsOnline() {
            return waitUntilPlayerIsOnline;
        }

        public boolean isCheckIfExecutorIsPlayer() {
            return checkIfExecutorIsPlayer;
        }

        public boolean isCheckIfExecutorIsOnServer() {
            return checkIfExecutorIsOnServer;
        }
    }

    public abstract void onFileProcessed(String fileName, ScriptConfig scriptConfig);
}
</file>

<file path="paper/src/main/resources/bukkit-example.yml">
##########################################################################
# EXAMPLE CONFIGURATION
# This file demonstrates how to dispatch a command to the Bukkit server
# or servers, where the command gets executed on the Velocity server.
##########################################################################

# The name of the command to be dispatched.
# This is the identifier for the command configuration.
name: examplebukkit

# Enable or disable this command.
# Set to true to allow the command to be executed, or false to disable it.
enabled: true

# A list of aliases for the command.
# Remove all or use [] to disable aliases.
aliases:   
  - examplebukkitcmd

# Ignore permission checks for this command.
# Set to true to bypass permission validation, or false to enforce it.
ignore-permission-check: false

# Hide permission warnings when the executor does not have the required permissions.
# Set to true to suppress warnings, or false to show them.
hide-permission-warning: false

# A list of commands to execute on the server.
commands:
  # Command 1
  - command: 'velocity info' # The command string to be executed.
    delay: 0                     # Delay (in seconds) before executing the command.
    target-executor: 'player'    # Who executes the command: 'player' or 'console'.
    check-if-executor-is-player: true  # If true, ensures the executor is a player.

  # Command 2
  - command: 'velocity plugins' # The command string to be executed.
    delay: 0                      # Delay (in seconds) before executing the command.
    target-executor: 'console'    # Who executes the command: 'player' or 'console'.
    check-if-executor-is-player: false  # If true, ensures the executor is a player.
</file>

<file path="core/build.gradle.kts">
plugins {
    id("java")
}

dependencies {
    implementation("io.netty:netty-all:4.2.2.Final")
    implementation("org.json:json:20250517")
    implementation("org.bouncycastle:bcprov-jdk18on:1.81")
    implementation("org.bouncycastle:bcpkix-jdk18on:1.81")
    implementation("io.jsonwebtoken:jjwt-api:0.12.6")
    implementation("io.jsonwebtoken:jjwt-impl:0.12.6")
    implementation("io.jsonwebtoken:jjwt-jackson:0.12.6")
    implementation("org.yaml:snakeyaml:2.4")
    implementation("org.slf4j:slf4j-api:2.0.17")
    
    runtimeOnly("org.slf4j:slf4j-simple:2.0.17")
}
</file>

<file path="README.md">
[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)
[![Modrinth Downloads](https://img.shields.io/modrinth/dt/commandbridge?logo=modrinth&label=downloads)](https://modrinth.com/plugin/commandbridge)
[![Java](https://img.shields.io/badge/Java-21-orange.svg)](https://openjdk.java.net/projects/jdk/21/)
[![Minecraft](https://img.shields.io/badge/Minecraft-1.20.x--1.21.x-green.svg)](https://minecraft.net)
[![Paper](https://img.shields.io/badge/Server-Paper-blue.svg)](https://papermc.io/)
[![Velocity](https://img.shields.io/badge/Proxy-Velocity-purple.svg)](https://velocitypowered.com/)

---

CommandBridge connects Velocity and Paper servers using WebSockets. 

- Supports Minecraft 1.20.x to 1.21.x (Not for 1.8, not sorry).

- Java 21 only.

- Paper, Folia, Purpur, Bukkit, Spigot, Velocity, Waterfall.

Build with:

```bash
git clone https://github.com/objz/CommandBridge.git
cd CommandBridge
./gradlew shadowJar
````

Installation and configuration guide is [here](https://cb.objz.dev/docs/installation/).

---

Velocity runs the WebSocket server. Paper runs the client. The connection is authenticated using a shared secret (HMAC). Configs are generated on first run. Port and address settings must match. You copy the key manually, yes, on purpose.

Once connected, you’ll see something like:

```
[INFO] [CommandBridge]: Client authenticated successfully
[INFO] [CommandBridge]: Added connected client: lobby
```

---

Architecture is three modules:

* `core` – WebSocket implementations, util stuff
* `velocity` – plugin impl + server
* `paper` – plugin impl + client


Still to come:

* GUI for managing scripts (cause YAML is great, but not that great)
* Multi-Velocity support 
* Public API for extensions, message types, etc

Licensed under GPLv3. Don’t sell it, don’t strip the license, thanks!
</file>

<file path="paper/src/main/resources/plugin.yml">
name: CommandBridge
version: 2.2.8
main: dev.objz.commandbridge.paper.Main
author: objz
api-version: '1.20'
folia-supported: true
softdepend:
- PlaceholderAPI
</file>

<file path="CHANGELOG.md">
**[v2.2.7] - 2025-07-02**

- updated to minecraft version 1.21.7
- introduced aliases for scripts.

go outside, great weather!
</file>

<file path="paper/src/main/resources/paper-plugin.yml">
name: CommandBridge
version: 2.2.8
main: dev.objz.commandbridge.paper.Main
author: objz
api-version: '1.20'
folia-supported: true
dependencies:
  server:
    PlaceholderAPI:
      load: BEFORE
      required: false
</file>

<file path="velocity/build.gradle.kts">
import com.google.gson.JsonParser
import java.nio.file.Files

plugins {
    id("java")
}

repositories {
    maven { url = uri("https://repo.papermc.io/repository/maven-public/") }
    maven { url = uri("https://repo.william278.net/releases/") }
}

dependencies {
    implementation("io.netty:netty-all:4.2.2.Final")
    implementation("org.json:json:20250517")
    compileOnly("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")
    annotationProcessor("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")
    compileOnly("net.william278:papiproxybridge:1.7.2")
    implementation("org.bstats:bstats-velocity:3.1.0")
    implementation("com.github.luben:zstd-jni:1.5.7-4")

    implementation(project(":core"))
}

tasks.register("modifyVelocityPluginJson") {
    doLast {
        val jsonFile = layout.buildDirectory.file("classes/java/main/velocity-plugin.json").get().asFile
        if (jsonFile.exists()) {
            println("Found velocity-plugin.json")

            val jsonContent = Files.readString(jsonFile.toPath())
            val jsonObject = JsonParser.parseString(jsonContent).asJsonObject

            jsonObject.addProperty("version", version.toString())

            Files.writeString(jsonFile.toPath(), jsonObject.toString())
            println("velocity-plugin.json updated successfully with version $version")
        } else {
            println("velocity-plugin.json not found")
        }
    }
}

tasks.register("generatePluginProperties") {
    doLast {
        println("Generating plugin.properties file")

        val propertiesFile = layout.buildDirectory.file("resources/main/plugin.properties").get().asFile
        propertiesFile.parentFile.mkdirs()
        propertiesFile.writeText("plugin.version=$version")

        println("Successfully generated plugin.properties file")
    }
}

tasks.named("processResources") {
    dependsOn("generatePluginProperties")
    finalizedBy("modifyVelocityPluginJson")
}
</file>

<file path="build.gradle.kts">
plugins {
    id("java")
    id("com.gradleup.shadow") version "8.3.8"
    id("maven-publish")
    id("com.modrinth.minotaur") version "2.+"
    id("com.github.ben-manes.versions") version "0.52.0"
}

val pversion: String by gradle.extra
val pluginType: String by gradle.extra
val pluginVersions: List<String> by gradle.extra
val pluginLoaders: List<String> by gradle.extra

allprojects {
    group = "dev.consti"
    version = pversion

    repositories {
        mavenCentral()
    }

    if (plugins.hasPlugin("java")) {
        java {
            toolchain {
                languageVersion.set(JavaLanguageVersion.of(21))
            }
        }
    }
}

dependencies {
    implementation(project(":paper"))
    implementation(project(":velocity"))
    implementation(project(":core"))
}

tasks {
    shadowJar {
        dependsOn(":paper:shadowJar")
        manifest { attributes["paperweight-mappings-namespace"] = "spigot" }

        relocate("dev.jorel.commandapi", "dev.objz.commandbridge.commandapi")
        relocate("org.bstats", "dev.objz.commandbridge.bstats")

        listOf(":paper", ":velocity", ":core").forEach { projectPath ->
            from(
                project(projectPath)
                    .takeIf { it.plugins.hasPlugin("java") }
                    ?.sourceSets?.main?.get()?.output
                    ?: files()
            )
        }

        configurations = listOf(project.configurations.runtimeClasspath.get())
        mergeServiceFiles()
    }

    val copyToPaperPlugins by registering(Copy::class) {
        dependsOn(shadowJar)
        from(shadowJar.get().outputs.files)
        into("/mnt/Storage/Server-TEST/CommandBridge/Paper/plugins")
    }

    val copyToVelocityPlugins by registering(Copy::class) {
        dependsOn(shadowJar)
        from(shadowJar.get().outputs.files)
        into("/mnt/Storage/Server-TEST/CommandBridge/Velocity/plugins")
    }

    register("dev") { dependsOn(copyToPaperPlugins, copyToVelocityPlugins) }
}

afterEvaluate {
    modrinth {
        token.set(System.getenv("MODRINTH_TOKEN"))
        projectId.set("wIuI4ru2")
        versionName.set("CommandBridge $pversion")
        changelog.set(rootProject.file("CHANGELOG.md").readText())
        versionNumber.set(pversion)
        versionType.set(pluginType)
        uploadFile.set(tasks.shadowJar)
        gameVersions.set(pluginVersions)
        loaders.set(pluginLoaders)
        debugMode.set(false)
    }
}
</file>

<file path="settings.gradle.kts">
rootProject.name = "CommandBridge"
include("paper", "velocity", "core")

gradle.extra["pversion"] = "2.2.8"
gradle.extra["pluginType"] = "release"
gradle.extra["pluginVersions"] = listOf("1.20", "1.20.1", "1.20.2", "1.20.3", "1.20.4", "1.20.5", "1.20.6", "1.21", "1.21.1", "1.21.2", "1.21.3", "1.21.4", "1.21.5", "1.21.6", "1.21.7")
gradle.extra["pluginLoaders"] = listOf("folia", "paper", "purpur", "velocity", "bukkit", "spigot", "waterfall")
</file>

<file path="paper/build.gradle.kts">
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.yaml:snakeyaml:2.4")
    }
}

import org.yaml.snakeyaml.DumperOptions
import org.yaml.snakeyaml.Yaml

plugins {
    id("java")
    id("com.gradleup.shadow") version "8.3.8"
}

repositories {
    maven { url = uri("https://repo.papermc.io/repository/maven-public/") }
    maven { url = uri("https://repo.codemc.org/repository/maven-public/") }
    maven { url = uri("https://hub.spigotmc.org/nexus/content/repositories/snapshots/") }
    maven { url = uri("https://repo.extendedclip.com/releases/") }
}

dependencies {
    implementation("org.json:json:20250517")
    compileOnly("dev.folia:folia-api:1.20.1-R0.1-SNAPSHOT")
    implementation("org.ow2.asm:asm:9.8")
    implementation("dev.jorel:commandapi-bukkit-shade:10.1.1")
    implementation("com.github.luben:zstd-jni:1.5.7-4")
    compileOnly("dev.jorel:commandapi-annotations:10.1.1")
    compileOnly("me.clip:placeholderapi:2.11.6")
    annotationProcessor("dev.jorel:commandapi-annotations:10.1.1")

    implementation(project(":core"))
}

fun createYamlModificationTask(taskName: String, fileName: String, displayName: String) = 
    tasks.register(taskName) {
        doLast {
            val yamlFile = file("src/main/resources/$fileName")

            if (yamlFile.exists()) {
                println("Found $displayName")

                val options = DumperOptions().apply {
                    defaultFlowStyle = DumperOptions.FlowStyle.BLOCK
                }
                val yaml = Yaml(options)

                val yamlContent = yaml.load<Map<String, Any>>(yamlFile.reader()).toMutableMap()
                yamlContent["version"] = version

                yamlFile.writer().use { writer ->
                    yaml.dump(yamlContent, writer)
                }

                println("$displayName updated successfully with version $version")
            } else {
                println("$displayName not found!")
            }
        }
    }

val modifyPaperPluginYaml = createYamlModificationTask("modifyPaperPluginYaml", "paper-plugin.yml", "paper-plugin.yml")
val modifyLegacyPluginYaml = createYamlModificationTask("modifyLegacyPluginYaml", "plugin.yml", "legacy plugin.yml")

tasks.named("processResources") {
    dependsOn(modifyPaperPluginYaml, modifyLegacyPluginYaml)
}
</file>

</files>
